<?php
/**
 * WorkFlowApi
 * PHP version 7.2
 *
 * @category Class
 * @package  SigniFlowConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SigniFlow OpenAPI Spec v1
 *
 * ## SigniFlow API used to automate esignature workflow creation and management.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SigniFlowConnect\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SigniFlowConnect\ApiException;
use SigniFlowConnect\Configuration;
use SigniFlowConnect\HeaderSelector;
use SigniFlowConnect\ObjectSerializer;

/**
 * WorkFlowApi Class Doc Comment
 *
 * @category Class
 * @package  SigniFlowConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WorkFlowApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createWorkflow
     *
     * Create Workflow
     *
     * @param  string $content_type content_type (required)
     * @param  \SigniFlowConnect\Model\CreateWorkflowRequest $create_workflow_request ##### Create Workflow Request Model (required)
     *
     * @throws \SigniFlowConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SigniFlowConnect\Model\CreateWorkflowResponse
     */
    public function createWorkflow($content_type, $create_workflow_request)
    {
        list($response) = $this->createWorkflowWithHttpInfo($content_type, $create_workflow_request);
        return $response;
    }

    /**
     * Operation createWorkflowWithHttpInfo
     *
     * Create Workflow
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\CreateWorkflowRequest $create_workflow_request ##### Create Workflow Request Model (required)
     *
     * @throws \SigniFlowConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SigniFlowConnect\Model\CreateWorkflowResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWorkflowWithHttpInfo($content_type, $create_workflow_request)
    {
        $request = $this->createWorkflowRequest($content_type, $create_workflow_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\SigniFlowConnect\Model\CreateWorkflowResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SigniFlowConnect\Model\CreateWorkflowResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SigniFlowConnect\Model\CreateWorkflowResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SigniFlowConnect\Model\CreateWorkflowResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createWorkflowAsync
     *
     * Create Workflow
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\CreateWorkflowRequest $create_workflow_request ##### Create Workflow Request Model (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createWorkflowAsync($content_type, $create_workflow_request)
    {
        return $this->createWorkflowAsyncWithHttpInfo($content_type, $create_workflow_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createWorkflowAsyncWithHttpInfo
     *
     * Create Workflow
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\CreateWorkflowRequest $create_workflow_request ##### Create Workflow Request Model (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createWorkflowAsyncWithHttpInfo($content_type, $create_workflow_request)
    {
        $returnType = '\SigniFlowConnect\Model\CreateWorkflowResponse';
        $request = $this->createWorkflowRequest($content_type, $create_workflow_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createWorkflow'
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\CreateWorkflowRequest $create_workflow_request ##### Create Workflow Request Model (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createWorkflowRequest($content_type, $create_workflow_request)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling createWorkflow'
            );
        }
        // verify the required parameter 'create_workflow_request' is set
        if ($create_workflow_request === null || (is_array($create_workflow_request) && count($create_workflow_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_workflow_request when calling createWorkflow'
            );
        }

        $resourcePath = '/CreateWorkflow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($create_workflow_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_workflow_request));
            } else {
                $httpBody = $create_workflow_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDocument
     *
     * Get Document
     *
     * @param  string $content_type content_type (required)
     * @param  \SigniFlowConnect\Model\GetDocumentRequest $get_document_request ##### Get Document Request Model (optional)
     *
     * @throws \SigniFlowConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SigniFlowConnect\Model\GetDocumentResponse
     */
    public function getDocument($content_type, $get_document_request = null)
    {
        list($response) = $this->getDocumentWithHttpInfo($content_type, $get_document_request);
        return $response;
    }

    /**
     * Operation getDocumentWithHttpInfo
     *
     * Get Document
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\GetDocumentRequest $get_document_request ##### Get Document Request Model (optional)
     *
     * @throws \SigniFlowConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SigniFlowConnect\Model\GetDocumentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDocumentWithHttpInfo($content_type, $get_document_request = null)
    {
        $request = $this->getDocumentRequest($content_type, $get_document_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\SigniFlowConnect\Model\GetDocumentResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SigniFlowConnect\Model\GetDocumentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SigniFlowConnect\Model\GetDocumentResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SigniFlowConnect\Model\GetDocumentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDocumentAsync
     *
     * Get Document
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\GetDocumentRequest $get_document_request ##### Get Document Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDocumentAsync($content_type, $get_document_request = null)
    {
        return $this->getDocumentAsyncWithHttpInfo($content_type, $get_document_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDocumentAsyncWithHttpInfo
     *
     * Get Document
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\GetDocumentRequest $get_document_request ##### Get Document Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDocumentAsyncWithHttpInfo($content_type, $get_document_request = null)
    {
        $returnType = '\SigniFlowConnect\Model\GetDocumentResponse';
        $request = $this->getDocumentRequest($content_type, $get_document_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDocument'
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\GetDocumentRequest $get_document_request ##### Get Document Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDocumentRequest($content_type, $get_document_request = null)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling getDocument'
            );
        }

        $resourcePath = '/GetDoc';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($get_document_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($get_document_request));
            } else {
                $httpBody = $get_document_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postAddWorkflowStep
     *
     * Add a Workflow step
     *
     * @param  string $content_type content_type (required)
     * @param  \SigniFlowConnect\Model\AddWorkflowStepV2Request $add_workflow_step_v2_request ##### Add A Workflow Step Request Model (optional)
     *
     * @throws \SigniFlowConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SigniFlowConnect\Model\AddWokflowStepV2Response
     */
    public function postAddWorkflowStep($content_type, $add_workflow_step_v2_request = null)
    {
        list($response) = $this->postAddWorkflowStepWithHttpInfo($content_type, $add_workflow_step_v2_request);
        return $response;
    }

    /**
     * Operation postAddWorkflowStepWithHttpInfo
     *
     * Add a Workflow step
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\AddWorkflowStepV2Request $add_workflow_step_v2_request ##### Add A Workflow Step Request Model (optional)
     *
     * @throws \SigniFlowConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SigniFlowConnect\Model\AddWokflowStepV2Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postAddWorkflowStepWithHttpInfo($content_type, $add_workflow_step_v2_request = null)
    {
        $request = $this->postAddWorkflowStepRequest($content_type, $add_workflow_step_v2_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\SigniFlowConnect\Model\AddWokflowStepV2Response' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SigniFlowConnect\Model\AddWokflowStepV2Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SigniFlowConnect\Model\AddWokflowStepV2Response';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SigniFlowConnect\Model\AddWokflowStepV2Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postAddWorkflowStepAsync
     *
     * Add a Workflow step
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\AddWorkflowStepV2Request $add_workflow_step_v2_request ##### Add A Workflow Step Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAddWorkflowStepAsync($content_type, $add_workflow_step_v2_request = null)
    {
        return $this->postAddWorkflowStepAsyncWithHttpInfo($content_type, $add_workflow_step_v2_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postAddWorkflowStepAsyncWithHttpInfo
     *
     * Add a Workflow step
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\AddWorkflowStepV2Request $add_workflow_step_v2_request ##### Add A Workflow Step Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAddWorkflowStepAsyncWithHttpInfo($content_type, $add_workflow_step_v2_request = null)
    {
        $returnType = '\SigniFlowConnect\Model\AddWokflowStepV2Response';
        $request = $this->postAddWorkflowStepRequest($content_type, $add_workflow_step_v2_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postAddWorkflowStep'
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\AddWorkflowStepV2Request $add_workflow_step_v2_request ##### Add A Workflow Step Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postAddWorkflowStepRequest($content_type, $add_workflow_step_v2_request = null)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling postAddWorkflowStep'
            );
        }

        $resourcePath = '/AddWorkflowStepV2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($add_workflow_step_v2_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($add_workflow_step_v2_request));
            } else {
                $httpBody = $add_workflow_step_v2_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCancelFlow
     *
     * Cancel Flow
     *
     * @param  string $content_type content_type (required)
     * @param  \SigniFlowConnect\Model\CancelFlowRequest $cancel_flow_request ##### Cancel Flow Request Model (optional)
     *
     * @throws \SigniFlowConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SigniFlowConnect\Model\CancelFlowResponse
     */
    public function postCancelFlow($content_type, $cancel_flow_request = null)
    {
        list($response) = $this->postCancelFlowWithHttpInfo($content_type, $cancel_flow_request);
        return $response;
    }

    /**
     * Operation postCancelFlowWithHttpInfo
     *
     * Cancel Flow
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\CancelFlowRequest $cancel_flow_request ##### Cancel Flow Request Model (optional)
     *
     * @throws \SigniFlowConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SigniFlowConnect\Model\CancelFlowResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCancelFlowWithHttpInfo($content_type, $cancel_flow_request = null)
    {
        $request = $this->postCancelFlowRequest($content_type, $cancel_flow_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\SigniFlowConnect\Model\CancelFlowResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SigniFlowConnect\Model\CancelFlowResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SigniFlowConnect\Model\CancelFlowResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SigniFlowConnect\Model\CancelFlowResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postCancelFlowAsync
     *
     * Cancel Flow
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\CancelFlowRequest $cancel_flow_request ##### Cancel Flow Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCancelFlowAsync($content_type, $cancel_flow_request = null)
    {
        return $this->postCancelFlowAsyncWithHttpInfo($content_type, $cancel_flow_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCancelFlowAsyncWithHttpInfo
     *
     * Cancel Flow
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\CancelFlowRequest $cancel_flow_request ##### Cancel Flow Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCancelFlowAsyncWithHttpInfo($content_type, $cancel_flow_request = null)
    {
        $returnType = '\SigniFlowConnect\Model\CancelFlowResponse';
        $request = $this->postCancelFlowRequest($content_type, $cancel_flow_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCancelFlow'
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\CancelFlowRequest $cancel_flow_request ##### Cancel Flow Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postCancelFlowRequest($content_type, $cancel_flow_request = null)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling postCancelFlow'
            );
        }

        $resourcePath = '/CancelFlow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($cancel_flow_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($cancel_flow_request));
            } else {
                $httpBody = $cancel_flow_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postDeleteDoc
     *
     * Delete Document
     *
     * @param  string $content_type content_type (required)
     * @param  \SigniFlowConnect\Model\DeleteDocRequest $delete_doc_request ##### Delete Document Request Model (optional)
     *
     * @throws \SigniFlowConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SigniFlowConnect\Model\DeleteDocResponse
     */
    public function postDeleteDoc($content_type, $delete_doc_request = null)
    {
        list($response) = $this->postDeleteDocWithHttpInfo($content_type, $delete_doc_request);
        return $response;
    }

    /**
     * Operation postDeleteDocWithHttpInfo
     *
     * Delete Document
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\DeleteDocRequest $delete_doc_request ##### Delete Document Request Model (optional)
     *
     * @throws \SigniFlowConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SigniFlowConnect\Model\DeleteDocResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postDeleteDocWithHttpInfo($content_type, $delete_doc_request = null)
    {
        $request = $this->postDeleteDocRequest($content_type, $delete_doc_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\SigniFlowConnect\Model\DeleteDocResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SigniFlowConnect\Model\DeleteDocResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SigniFlowConnect\Model\DeleteDocResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SigniFlowConnect\Model\DeleteDocResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postDeleteDocAsync
     *
     * Delete Document
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\DeleteDocRequest $delete_doc_request ##### Delete Document Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDeleteDocAsync($content_type, $delete_doc_request = null)
    {
        return $this->postDeleteDocAsyncWithHttpInfo($content_type, $delete_doc_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postDeleteDocAsyncWithHttpInfo
     *
     * Delete Document
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\DeleteDocRequest $delete_doc_request ##### Delete Document Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDeleteDocAsyncWithHttpInfo($content_type, $delete_doc_request = null)
    {
        $returnType = '\SigniFlowConnect\Model\DeleteDocResponse';
        $request = $this->postDeleteDocRequest($content_type, $delete_doc_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postDeleteDoc'
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\DeleteDocRequest $delete_doc_request ##### Delete Document Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postDeleteDocRequest($content_type, $delete_doc_request = null)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling postDeleteDoc'
            );
        }

        $resourcePath = '/DeleteDoc';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($delete_doc_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($delete_doc_request));
            } else {
                $httpBody = $delete_doc_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postDocPrepperAddField
     *
     * Document Prepper Add Fields
     *
     * @param  string $content_type content_type (required)
     * @param  \SigniFlowConnect\Model\DocPrepperAddFieldsFlowIDRequest $doc_prepper_add_fields_flow_id_request ##### Document Prepper Add Fields Request Model (optional)
     *
     * @throws \SigniFlowConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SigniFlowConnect\Model\DocPrepperAddFieldsFlowIDResponse
     */
    public function postDocPrepperAddField($content_type, $doc_prepper_add_fields_flow_id_request = null)
    {
        list($response) = $this->postDocPrepperAddFieldWithHttpInfo($content_type, $doc_prepper_add_fields_flow_id_request);
        return $response;
    }

    /**
     * Operation postDocPrepperAddFieldWithHttpInfo
     *
     * Document Prepper Add Fields
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\DocPrepperAddFieldsFlowIDRequest $doc_prepper_add_fields_flow_id_request ##### Document Prepper Add Fields Request Model (optional)
     *
     * @throws \SigniFlowConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SigniFlowConnect\Model\DocPrepperAddFieldsFlowIDResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postDocPrepperAddFieldWithHttpInfo($content_type, $doc_prepper_add_fields_flow_id_request = null)
    {
        $request = $this->postDocPrepperAddFieldRequest($content_type, $doc_prepper_add_fields_flow_id_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\SigniFlowConnect\Model\DocPrepperAddFieldsFlowIDResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SigniFlowConnect\Model\DocPrepperAddFieldsFlowIDResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SigniFlowConnect\Model\DocPrepperAddFieldsFlowIDResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SigniFlowConnect\Model\DocPrepperAddFieldsFlowIDResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postDocPrepperAddFieldAsync
     *
     * Document Prepper Add Fields
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\DocPrepperAddFieldsFlowIDRequest $doc_prepper_add_fields_flow_id_request ##### Document Prepper Add Fields Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDocPrepperAddFieldAsync($content_type, $doc_prepper_add_fields_flow_id_request = null)
    {
        return $this->postDocPrepperAddFieldAsyncWithHttpInfo($content_type, $doc_prepper_add_fields_flow_id_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postDocPrepperAddFieldAsyncWithHttpInfo
     *
     * Document Prepper Add Fields
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\DocPrepperAddFieldsFlowIDRequest $doc_prepper_add_fields_flow_id_request ##### Document Prepper Add Fields Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDocPrepperAddFieldAsyncWithHttpInfo($content_type, $doc_prepper_add_fields_flow_id_request = null)
    {
        $returnType = '\SigniFlowConnect\Model\DocPrepperAddFieldsFlowIDResponse';
        $request = $this->postDocPrepperAddFieldRequest($content_type, $doc_prepper_add_fields_flow_id_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postDocPrepperAddField'
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\DocPrepperAddFieldsFlowIDRequest $doc_prepper_add_fields_flow_id_request ##### Document Prepper Add Fields Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postDocPrepperAddFieldRequest($content_type, $doc_prepper_add_fields_flow_id_request = null)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling postDocPrepperAddField'
            );
        }

        $resourcePath = '/DocPrepperAddFieldsFlowID';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($doc_prepper_add_fields_flow_id_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($doc_prepper_add_fields_flow_id_request));
            } else {
                $httpBody = $doc_prepper_add_fields_flow_id_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postDocPrepperAdvancedFields
     *
     * Document Prepper Add Advanced Fields
     *
     * @param  string $content_type content_type (required)
     * @param  \SigniFlowConnect\Model\DocPrepperAddAdvancedFieldsRequest $doc_prepper_add_advanced_fields_request ##### Document Prepper Add Advanced Fields Request Model (optional)
     *
     * @throws \SigniFlowConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SigniFlowConnect\Model\DocPrepperAddAdvancedFieldsResponse
     */
    public function postDocPrepperAdvancedFields($content_type, $doc_prepper_add_advanced_fields_request = null)
    {
        list($response) = $this->postDocPrepperAdvancedFieldsWithHttpInfo($content_type, $doc_prepper_add_advanced_fields_request);
        return $response;
    }

    /**
     * Operation postDocPrepperAdvancedFieldsWithHttpInfo
     *
     * Document Prepper Add Advanced Fields
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\DocPrepperAddAdvancedFieldsRequest $doc_prepper_add_advanced_fields_request ##### Document Prepper Add Advanced Fields Request Model (optional)
     *
     * @throws \SigniFlowConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SigniFlowConnect\Model\DocPrepperAddAdvancedFieldsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postDocPrepperAdvancedFieldsWithHttpInfo($content_type, $doc_prepper_add_advanced_fields_request = null)
    {
        $request = $this->postDocPrepperAdvancedFieldsRequest($content_type, $doc_prepper_add_advanced_fields_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\SigniFlowConnect\Model\DocPrepperAddAdvancedFieldsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SigniFlowConnect\Model\DocPrepperAddAdvancedFieldsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SigniFlowConnect\Model\DocPrepperAddAdvancedFieldsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SigniFlowConnect\Model\DocPrepperAddAdvancedFieldsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postDocPrepperAdvancedFieldsAsync
     *
     * Document Prepper Add Advanced Fields
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\DocPrepperAddAdvancedFieldsRequest $doc_prepper_add_advanced_fields_request ##### Document Prepper Add Advanced Fields Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDocPrepperAdvancedFieldsAsync($content_type, $doc_prepper_add_advanced_fields_request = null)
    {
        return $this->postDocPrepperAdvancedFieldsAsyncWithHttpInfo($content_type, $doc_prepper_add_advanced_fields_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postDocPrepperAdvancedFieldsAsyncWithHttpInfo
     *
     * Document Prepper Add Advanced Fields
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\DocPrepperAddAdvancedFieldsRequest $doc_prepper_add_advanced_fields_request ##### Document Prepper Add Advanced Fields Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDocPrepperAdvancedFieldsAsyncWithHttpInfo($content_type, $doc_prepper_add_advanced_fields_request = null)
    {
        $returnType = '\SigniFlowConnect\Model\DocPrepperAddAdvancedFieldsResponse';
        $request = $this->postDocPrepperAdvancedFieldsRequest($content_type, $doc_prepper_add_advanced_fields_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postDocPrepperAdvancedFields'
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\DocPrepperAddAdvancedFieldsRequest $doc_prepper_add_advanced_fields_request ##### Document Prepper Add Advanced Fields Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postDocPrepperAdvancedFieldsRequest($content_type, $doc_prepper_add_advanced_fields_request = null)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling postDocPrepperAdvancedFields'
            );
        }

        $resourcePath = '/DocPrepperAdvancedFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($doc_prepper_add_advanced_fields_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($doc_prepper_add_advanced_fields_request));
            } else {
                $httpBody = $doc_prepper_add_advanced_fields_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postFullWorkflow
     *
     * FullWorkflow
     *
     * @param  string $content_type content_type (required)
     * @param  \SigniFlowConnect\Model\FullWorkflowRequest $full_workflow_request ##### FullWorkflow Request Model (optional)
     *
     * @throws \SigniFlowConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SigniFlowConnect\Model\FullWorkflowResponse
     */
    public function postFullWorkflow($content_type, $full_workflow_request = null)
    {
        list($response) = $this->postFullWorkflowWithHttpInfo($content_type, $full_workflow_request);
        return $response;
    }

    /**
     * Operation postFullWorkflowWithHttpInfo
     *
     * FullWorkflow
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\FullWorkflowRequest $full_workflow_request ##### FullWorkflow Request Model (optional)
     *
     * @throws \SigniFlowConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SigniFlowConnect\Model\FullWorkflowResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postFullWorkflowWithHttpInfo($content_type, $full_workflow_request = null)
    {
        $request = $this->postFullWorkflowRequest($content_type, $full_workflow_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\SigniFlowConnect\Model\FullWorkflowResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SigniFlowConnect\Model\FullWorkflowResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SigniFlowConnect\Model\FullWorkflowResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SigniFlowConnect\Model\FullWorkflowResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postFullWorkflowAsync
     *
     * FullWorkflow
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\FullWorkflowRequest $full_workflow_request ##### FullWorkflow Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postFullWorkflowAsync($content_type, $full_workflow_request = null)
    {
        return $this->postFullWorkflowAsyncWithHttpInfo($content_type, $full_workflow_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postFullWorkflowAsyncWithHttpInfo
     *
     * FullWorkflow
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\FullWorkflowRequest $full_workflow_request ##### FullWorkflow Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postFullWorkflowAsyncWithHttpInfo($content_type, $full_workflow_request = null)
    {
        $returnType = '\SigniFlowConnect\Model\FullWorkflowResponse';
        $request = $this->postFullWorkflowRequest($content_type, $full_workflow_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postFullWorkflow'
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\FullWorkflowRequest $full_workflow_request ##### FullWorkflow Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postFullWorkflowRequest($content_type, $full_workflow_request = null)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling postFullWorkflow'
            );
        }

        $resourcePath = '/FullWorkflow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($full_workflow_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($full_workflow_request));
            } else {
                $httpBody = $full_workflow_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postGetDocStatus
     *
     * Get Document Status
     *
     * @param  string $content_type content_type (required)
     * @param  \SigniFlowConnect\Model\GetDocStatusRequest $get_doc_status_request ##### Get Document Status Request Model (optional)
     *
     * @throws \SigniFlowConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SigniFlowConnect\Model\GetDocStatusResponse
     */
    public function postGetDocStatus($content_type, $get_doc_status_request = null)
    {
        list($response) = $this->postGetDocStatusWithHttpInfo($content_type, $get_doc_status_request);
        return $response;
    }

    /**
     * Operation postGetDocStatusWithHttpInfo
     *
     * Get Document Status
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\GetDocStatusRequest $get_doc_status_request ##### Get Document Status Request Model (optional)
     *
     * @throws \SigniFlowConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SigniFlowConnect\Model\GetDocStatusResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postGetDocStatusWithHttpInfo($content_type, $get_doc_status_request = null)
    {
        $request = $this->postGetDocStatusRequest($content_type, $get_doc_status_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\SigniFlowConnect\Model\GetDocStatusResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SigniFlowConnect\Model\GetDocStatusResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SigniFlowConnect\Model\GetDocStatusResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SigniFlowConnect\Model\GetDocStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postGetDocStatusAsync
     *
     * Get Document Status
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\GetDocStatusRequest $get_doc_status_request ##### Get Document Status Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postGetDocStatusAsync($content_type, $get_doc_status_request = null)
    {
        return $this->postGetDocStatusAsyncWithHttpInfo($content_type, $get_doc_status_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postGetDocStatusAsyncWithHttpInfo
     *
     * Get Document Status
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\GetDocStatusRequest $get_doc_status_request ##### Get Document Status Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postGetDocStatusAsyncWithHttpInfo($content_type, $get_doc_status_request = null)
    {
        $returnType = '\SigniFlowConnect\Model\GetDocStatusResponse';
        $request = $this->postGetDocStatusRequest($content_type, $get_doc_status_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postGetDocStatus'
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\GetDocStatusRequest $get_doc_status_request ##### Get Document Status Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postGetDocStatusRequest($content_type, $get_doc_status_request = null)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling postGetDocStatus'
            );
        }

        $resourcePath = '/GetDocStatus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($get_doc_status_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($get_doc_status_request));
            } else {
                $httpBody = $get_doc_status_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postInitiateFlow
     *
     * Initiate Flow
     *
     * @param  string $content_type content_type (required)
     * @param  \SigniFlowConnect\Model\InitiateFlowRequest $initiate_flow_request ##### Initiate Flow Request Model (optional)
     *
     * @throws \SigniFlowConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SigniFlowConnect\Model\InitiateFlowResponse
     */
    public function postInitiateFlow($content_type, $initiate_flow_request = null)
    {
        list($response) = $this->postInitiateFlowWithHttpInfo($content_type, $initiate_flow_request);
        return $response;
    }

    /**
     * Operation postInitiateFlowWithHttpInfo
     *
     * Initiate Flow
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\InitiateFlowRequest $initiate_flow_request ##### Initiate Flow Request Model (optional)
     *
     * @throws \SigniFlowConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SigniFlowConnect\Model\InitiateFlowResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postInitiateFlowWithHttpInfo($content_type, $initiate_flow_request = null)
    {
        $request = $this->postInitiateFlowRequest($content_type, $initiate_flow_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\SigniFlowConnect\Model\InitiateFlowResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SigniFlowConnect\Model\InitiateFlowResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SigniFlowConnect\Model\InitiateFlowResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SigniFlowConnect\Model\InitiateFlowResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postInitiateFlowAsync
     *
     * Initiate Flow
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\InitiateFlowRequest $initiate_flow_request ##### Initiate Flow Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postInitiateFlowAsync($content_type, $initiate_flow_request = null)
    {
        return $this->postInitiateFlowAsyncWithHttpInfo($content_type, $initiate_flow_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postInitiateFlowAsyncWithHttpInfo
     *
     * Initiate Flow
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\InitiateFlowRequest $initiate_flow_request ##### Initiate Flow Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postInitiateFlowAsyncWithHttpInfo($content_type, $initiate_flow_request = null)
    {
        $returnType = '\SigniFlowConnect\Model\InitiateFlowResponse';
        $request = $this->postInitiateFlowRequest($content_type, $initiate_flow_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postInitiateFlow'
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\InitiateFlowRequest $initiate_flow_request ##### Initiate Flow Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postInitiateFlowRequest($content_type, $initiate_flow_request = null)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling postInitiateFlow'
            );
        }

        $resourcePath = '/InitiateFlow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($initiate_flow_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($initiate_flow_request));
            } else {
                $httpBody = $initiate_flow_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postInitiateFlowNoEmail
     *
     * Initiate Flow No Email
     *
     * @param  string $content_type content_type (required)
     * @param  \SigniFlowConnect\Model\InitiateFlowNoEmailRequest $initiate_flow_no_email_request ##### Initiate Flow No Email Request Model (optional)
     *
     * @throws \SigniFlowConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SigniFlowConnect\Model\InitiateFlowNoEmailResponse
     */
    public function postInitiateFlowNoEmail($content_type, $initiate_flow_no_email_request = null)
    {
        list($response) = $this->postInitiateFlowNoEmailWithHttpInfo($content_type, $initiate_flow_no_email_request);
        return $response;
    }

    /**
     * Operation postInitiateFlowNoEmailWithHttpInfo
     *
     * Initiate Flow No Email
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\InitiateFlowNoEmailRequest $initiate_flow_no_email_request ##### Initiate Flow No Email Request Model (optional)
     *
     * @throws \SigniFlowConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SigniFlowConnect\Model\InitiateFlowNoEmailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postInitiateFlowNoEmailWithHttpInfo($content_type, $initiate_flow_no_email_request = null)
    {
        $request = $this->postInitiateFlowNoEmailRequest($content_type, $initiate_flow_no_email_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\SigniFlowConnect\Model\InitiateFlowNoEmailResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SigniFlowConnect\Model\InitiateFlowNoEmailResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SigniFlowConnect\Model\InitiateFlowNoEmailResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SigniFlowConnect\Model\InitiateFlowNoEmailResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postInitiateFlowNoEmailAsync
     *
     * Initiate Flow No Email
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\InitiateFlowNoEmailRequest $initiate_flow_no_email_request ##### Initiate Flow No Email Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postInitiateFlowNoEmailAsync($content_type, $initiate_flow_no_email_request = null)
    {
        return $this->postInitiateFlowNoEmailAsyncWithHttpInfo($content_type, $initiate_flow_no_email_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postInitiateFlowNoEmailAsyncWithHttpInfo
     *
     * Initiate Flow No Email
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\InitiateFlowNoEmailRequest $initiate_flow_no_email_request ##### Initiate Flow No Email Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postInitiateFlowNoEmailAsyncWithHttpInfo($content_type, $initiate_flow_no_email_request = null)
    {
        $returnType = '\SigniFlowConnect\Model\InitiateFlowNoEmailResponse';
        $request = $this->postInitiateFlowNoEmailRequest($content_type, $initiate_flow_no_email_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postInitiateFlowNoEmail'
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\InitiateFlowNoEmailRequest $initiate_flow_no_email_request ##### Initiate Flow No Email Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postInitiateFlowNoEmailRequest($content_type, $initiate_flow_no_email_request = null)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling postInitiateFlowNoEmail'
            );
        }

        $resourcePath = '/InitiateFlow_No_Email';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($initiate_flow_no_email_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($initiate_flow_no_email_request));
            } else {
                $httpBody = $initiate_flow_no_email_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postInitiateFlowNoInitialEmail
     *
     * Initiate Flow No Initial Email
     *
     * @param  string $content_type content_type (required)
     * @param  \SigniFlowConnect\Model\InitiateFlowNoInitialEmailRequest $initiate_flow_no_initial_email_request ##### Initiate Flow No Initial Email Request Model (optional)
     *
     * @throws \SigniFlowConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SigniFlowConnect\Model\InitiateFlowNoInitialEmailResponse
     */
    public function postInitiateFlowNoInitialEmail($content_type, $initiate_flow_no_initial_email_request = null)
    {
        list($response) = $this->postInitiateFlowNoInitialEmailWithHttpInfo($content_type, $initiate_flow_no_initial_email_request);
        return $response;
    }

    /**
     * Operation postInitiateFlowNoInitialEmailWithHttpInfo
     *
     * Initiate Flow No Initial Email
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\InitiateFlowNoInitialEmailRequest $initiate_flow_no_initial_email_request ##### Initiate Flow No Initial Email Request Model (optional)
     *
     * @throws \SigniFlowConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SigniFlowConnect\Model\InitiateFlowNoInitialEmailResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postInitiateFlowNoInitialEmailWithHttpInfo($content_type, $initiate_flow_no_initial_email_request = null)
    {
        $request = $this->postInitiateFlowNoInitialEmailRequest($content_type, $initiate_flow_no_initial_email_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\SigniFlowConnect\Model\InitiateFlowNoInitialEmailResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SigniFlowConnect\Model\InitiateFlowNoInitialEmailResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SigniFlowConnect\Model\InitiateFlowNoInitialEmailResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SigniFlowConnect\Model\InitiateFlowNoInitialEmailResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postInitiateFlowNoInitialEmailAsync
     *
     * Initiate Flow No Initial Email
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\InitiateFlowNoInitialEmailRequest $initiate_flow_no_initial_email_request ##### Initiate Flow No Initial Email Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postInitiateFlowNoInitialEmailAsync($content_type, $initiate_flow_no_initial_email_request = null)
    {
        return $this->postInitiateFlowNoInitialEmailAsyncWithHttpInfo($content_type, $initiate_flow_no_initial_email_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postInitiateFlowNoInitialEmailAsyncWithHttpInfo
     *
     * Initiate Flow No Initial Email
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\InitiateFlowNoInitialEmailRequest $initiate_flow_no_initial_email_request ##### Initiate Flow No Initial Email Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postInitiateFlowNoInitialEmailAsyncWithHttpInfo($content_type, $initiate_flow_no_initial_email_request = null)
    {
        $returnType = '\SigniFlowConnect\Model\InitiateFlowNoInitialEmailResponse';
        $request = $this->postInitiateFlowNoInitialEmailRequest($content_type, $initiate_flow_no_initial_email_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postInitiateFlowNoInitialEmail'
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\InitiateFlowNoInitialEmailRequest $initiate_flow_no_initial_email_request ##### Initiate Flow No Initial Email Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postInitiateFlowNoInitialEmailRequest($content_type, $initiate_flow_no_initial_email_request = null)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling postInitiateFlowNoInitialEmail'
            );
        }

        $resourcePath = '/InitiateFlow_No_Initial_Email';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($initiate_flow_no_initial_email_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($initiate_flow_no_initial_email_request));
            } else {
                $httpBody = $initiate_flow_no_initial_email_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postWorkflowSign
     *
     * Workflow Sign
     *
     * @param  string $content_type content_type (required)
     * @param  \SigniFlowConnect\Model\WorkflowSignRequest $workflow_sign_request ##### Workflow Sign Request Model (optional)
     *
     * @throws \SigniFlowConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SigniFlowConnect\Model\WorkflowSignResponse
     */
    public function postWorkflowSign($content_type, $workflow_sign_request = null)
    {
        list($response) = $this->postWorkflowSignWithHttpInfo($content_type, $workflow_sign_request);
        return $response;
    }

    /**
     * Operation postWorkflowSignWithHttpInfo
     *
     * Workflow Sign
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\WorkflowSignRequest $workflow_sign_request ##### Workflow Sign Request Model (optional)
     *
     * @throws \SigniFlowConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SigniFlowConnect\Model\WorkflowSignResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postWorkflowSignWithHttpInfo($content_type, $workflow_sign_request = null)
    {
        $request = $this->postWorkflowSignRequest($content_type, $workflow_sign_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\SigniFlowConnect\Model\WorkflowSignResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SigniFlowConnect\Model\WorkflowSignResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SigniFlowConnect\Model\WorkflowSignResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SigniFlowConnect\Model\WorkflowSignResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postWorkflowSignAsync
     *
     * Workflow Sign
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\WorkflowSignRequest $workflow_sign_request ##### Workflow Sign Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postWorkflowSignAsync($content_type, $workflow_sign_request = null)
    {
        return $this->postWorkflowSignAsyncWithHttpInfo($content_type, $workflow_sign_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postWorkflowSignAsyncWithHttpInfo
     *
     * Workflow Sign
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\WorkflowSignRequest $workflow_sign_request ##### Workflow Sign Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postWorkflowSignAsyncWithHttpInfo($content_type, $workflow_sign_request = null)
    {
        $returnType = '\SigniFlowConnect\Model\WorkflowSignResponse';
        $request = $this->postWorkflowSignRequest($content_type, $workflow_sign_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postWorkflowSign'
     *
     * @param  string $content_type (required)
     * @param  \SigniFlowConnect\Model\WorkflowSignRequest $workflow_sign_request ##### Workflow Sign Request Model (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postWorkflowSignRequest($content_type, $workflow_sign_request = null)
    {
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling postWorkflowSign'
            );
        }

        $resourcePath = '/WorkflowSign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($workflow_sign_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($workflow_sign_request));
            } else {
                $httpBody = $workflow_sign_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
