<?php
/**
 * FullWorkflowRequestWorkflowUserFieldsField
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  SigniFlowConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SigniFlow OpenAPI Spec v1
 *
 * ## SigniFlow API used to automate esignature workflow creation and management.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SigniFlowConnect\Model;

use \ArrayAccess;
use \SigniFlowConnect\ObjectSerializer;

/**
 * FullWorkflowRequestWorkflowUserFieldsField Class Doc Comment
 *
 * @category Class
 * @package  SigniFlowConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class FullWorkflowRequestWorkflowUserFieldsField implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FullWorkflowRequest_WorkflowUserFieldsField';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'field_type_field' => 'float',
        'font_family_field' => 'string',
        'font_size_field' => 'float',
        'group_user_number_field' => 'float',
        'height_field' => 'string',
        'is_invisible_field' => 'bool',
        'page_number_field' => 'float',
        'tag_name_field' => 'string',
        'value_field' => 'string',
        'width_field' => 'string',
        'x_coordinate_field' => 'string',
        'x_offset_field' => 'float',
        'y_coordinate_field' => 'string',
        'y_offset_field' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'field_type_field' => null,
        'font_family_field' => null,
        'font_size_field' => null,
        'group_user_number_field' => null,
        'height_field' => null,
        'is_invisible_field' => null,
        'page_number_field' => null,
        'tag_name_field' => null,
        'value_field' => null,
        'width_field' => null,
        'x_coordinate_field' => null,
        'x_offset_field' => null,
        'y_coordinate_field' => null,
        'y_offset_field' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'field_type_field' => 'FieldTypeField',
        'font_family_field' => 'FontFamilyField',
        'font_size_field' => 'FontSizeField',
        'group_user_number_field' => 'GroupUserNumberField',
        'height_field' => 'HeightField',
        'is_invisible_field' => 'IsInvisibleField',
        'page_number_field' => 'PageNumberField',
        'tag_name_field' => 'TagNameField',
        'value_field' => 'ValueField',
        'width_field' => 'WidthField',
        'x_coordinate_field' => 'XCoordinateField',
        'x_offset_field' => 'XOffsetField',
        'y_coordinate_field' => 'YCoordinateField',
        'y_offset_field' => 'YOffsetField'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'field_type_field' => 'setFieldTypeField',
        'font_family_field' => 'setFontFamilyField',
        'font_size_field' => 'setFontSizeField',
        'group_user_number_field' => 'setGroupUserNumberField',
        'height_field' => 'setHeightField',
        'is_invisible_field' => 'setIsInvisibleField',
        'page_number_field' => 'setPageNumberField',
        'tag_name_field' => 'setTagNameField',
        'value_field' => 'setValueField',
        'width_field' => 'setWidthField',
        'x_coordinate_field' => 'setXCoordinateField',
        'x_offset_field' => 'setXOffsetField',
        'y_coordinate_field' => 'setYCoordinateField',
        'y_offset_field' => 'setYOffsetField'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'field_type_field' => 'getFieldTypeField',
        'font_family_field' => 'getFontFamilyField',
        'font_size_field' => 'getFontSizeField',
        'group_user_number_field' => 'getGroupUserNumberField',
        'height_field' => 'getHeightField',
        'is_invisible_field' => 'getIsInvisibleField',
        'page_number_field' => 'getPageNumberField',
        'tag_name_field' => 'getTagNameField',
        'value_field' => 'getValueField',
        'width_field' => 'getWidthField',
        'x_coordinate_field' => 'getXCoordinateField',
        'x_offset_field' => 'getXOffsetField',
        'y_coordinate_field' => 'getYCoordinateField',
        'y_offset_field' => 'getYOffsetField'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['field_type_field'] = $data['field_type_field'] ?? null;
        $this->container['font_family_field'] = $data['font_family_field'] ?? null;
        $this->container['font_size_field'] = $data['font_size_field'] ?? null;
        $this->container['group_user_number_field'] = $data['group_user_number_field'] ?? null;
        $this->container['height_field'] = $data['height_field'] ?? null;
        $this->container['is_invisible_field'] = $data['is_invisible_field'] ?? null;
        $this->container['page_number_field'] = $data['page_number_field'] ?? null;
        $this->container['tag_name_field'] = $data['tag_name_field'] ?? null;
        $this->container['value_field'] = $data['value_field'] ?? null;
        $this->container['width_field'] = $data['width_field'] ?? null;
        $this->container['x_coordinate_field'] = $data['x_coordinate_field'] ?? null;
        $this->container['x_offset_field'] = $data['x_offset_field'] ?? null;
        $this->container['y_coordinate_field'] = $data['y_coordinate_field'] ?? null;
        $this->container['y_offset_field'] = $data['y_offset_field'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['field_type_field'] === null) {
            $invalidProperties[] = "'field_type_field' can't be null";
        }
        if ($this->container['font_family_field'] === null) {
            $invalidProperties[] = "'font_family_field' can't be null";
        }
        if ((mb_strlen($this->container['font_family_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'font_family_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['font_size_field'] === null) {
            $invalidProperties[] = "'font_size_field' can't be null";
        }
        if ($this->container['group_user_number_field'] === null) {
            $invalidProperties[] = "'group_user_number_field' can't be null";
        }
        if ($this->container['height_field'] === null) {
            $invalidProperties[] = "'height_field' can't be null";
        }
        if ((mb_strlen($this->container['height_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'height_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['is_invisible_field'] === null) {
            $invalidProperties[] = "'is_invisible_field' can't be null";
        }
        if ($this->container['page_number_field'] === null) {
            $invalidProperties[] = "'page_number_field' can't be null";
        }
        if ($this->container['tag_name_field'] === null) {
            $invalidProperties[] = "'tag_name_field' can't be null";
        }
        if ((mb_strlen($this->container['tag_name_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'tag_name_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['value_field'] === null) {
            $invalidProperties[] = "'value_field' can't be null";
        }
        if ((mb_strlen($this->container['value_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'value_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['width_field'] === null) {
            $invalidProperties[] = "'width_field' can't be null";
        }
        if ((mb_strlen($this->container['width_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'width_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['x_coordinate_field'] === null) {
            $invalidProperties[] = "'x_coordinate_field' can't be null";
        }
        if ((mb_strlen($this->container['x_coordinate_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'x_coordinate_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['x_offset_field'] === null) {
            $invalidProperties[] = "'x_offset_field' can't be null";
        }
        if ($this->container['y_coordinate_field'] === null) {
            $invalidProperties[] = "'y_coordinate_field' can't be null";
        }
        if ((mb_strlen($this->container['y_coordinate_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'y_coordinate_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['y_offset_field'] === null) {
            $invalidProperties[] = "'y_offset_field' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets field_type_field
     *
     * @return float
     */
    public function getFieldTypeField()
    {
        return $this->container['field_type_field'];
    }

    /**
     * Sets field_type_field
     *
     * @param float $field_type_field Field type.
     *
     * @return self
     */
    public function setFieldTypeField($field_type_field)
    {
        $this->container['field_type_field'] = $field_type_field;

        return $this;
    }

    /**
     * Gets font_family_field
     *
     * @return string
     */
    public function getFontFamilyField()
    {
        return $this->container['font_family_field'];
    }

    /**
     * Sets font_family_field
     *
     * @param string $font_family_field The font family of the fields text.
     *
     * @return self
     */
    public function setFontFamilyField($font_family_field)
    {

        if ((mb_strlen($font_family_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $font_family_field when calling FullWorkflowRequestWorkflowUserFieldsField., must be bigger than or equal to 1.');
        }

        $this->container['font_family_field'] = $font_family_field;

        return $this;
    }

    /**
     * Gets font_size_field
     *
     * @return float
     */
    public function getFontSizeField()
    {
        return $this->container['font_size_field'];
    }

    /**
     * Sets font_size_field
     *
     * @param float $font_size_field The font size of the fields text.
     *
     * @return self
     */
    public function setFontSizeField($font_size_field)
    {
        $this->container['font_size_field'] = $font_size_field;

        return $this;
    }

    /**
     * Gets group_user_number_field
     *
     * @return float
     */
    public function getGroupUserNumberField()
    {
        return $this->container['group_user_number_field'];
    }

    /**
     * Sets group_user_number_field
     *
     * @param float $group_user_number_field The users in the group's user number.
     *
     * @return self
     */
    public function setGroupUserNumberField($group_user_number_field)
    {
        $this->container['group_user_number_field'] = $group_user_number_field;

        return $this;
    }

    /**
     * Gets height_field
     *
     * @return string
     */
    public function getHeightField()
    {
        return $this->container['height_field'];
    }

    /**
     * Sets height_field
     *
     * @param string $height_field Field height.
     *
     * @return self
     */
    public function setHeightField($height_field)
    {

        if ((mb_strlen($height_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $height_field when calling FullWorkflowRequestWorkflowUserFieldsField., must be bigger than or equal to 1.');
        }

        $this->container['height_field'] = $height_field;

        return $this;
    }

    /**
     * Gets is_invisible_field
     *
     * @return bool
     */
    public function getIsInvisibleField()
    {
        return $this->container['is_invisible_field'];
    }

    /**
     * Sets is_invisible_field
     *
     * @param bool $is_invisible_field Is the field visible.
     *
     * @return self
     */
    public function setIsInvisibleField($is_invisible_field)
    {
        $this->container['is_invisible_field'] = $is_invisible_field;

        return $this;
    }

    /**
     * Gets page_number_field
     *
     * @return float
     */
    public function getPageNumberField()
    {
        return $this->container['page_number_field'];
    }

    /**
     * Sets page_number_field
     *
     * @param float $page_number_field Field page number.
     *
     * @return self
     */
    public function setPageNumberField($page_number_field)
    {
        $this->container['page_number_field'] = $page_number_field;

        return $this;
    }

    /**
     * Gets tag_name_field
     *
     * @return string
     */
    public function getTagNameField()
    {
        return $this->container['tag_name_field'];
    }

    /**
     * Sets tag_name_field
     *
     * @param string $tag_name_field Field tag name.
     *
     * @return self
     */
    public function setTagNameField($tag_name_field)
    {

        if ((mb_strlen($tag_name_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $tag_name_field when calling FullWorkflowRequestWorkflowUserFieldsField., must be bigger than or equal to 1.');
        }

        $this->container['tag_name_field'] = $tag_name_field;

        return $this;
    }

    /**
     * Gets value_field
     *
     * @return string
     */
    public function getValueField()
    {
        return $this->container['value_field'];
    }

    /**
     * Sets value_field
     *
     * @param string $value_field Field value.
     *
     * @return self
     */
    public function setValueField($value_field)
    {

        if ((mb_strlen($value_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $value_field when calling FullWorkflowRequestWorkflowUserFieldsField., must be bigger than or equal to 1.');
        }

        $this->container['value_field'] = $value_field;

        return $this;
    }

    /**
     * Gets width_field
     *
     * @return string
     */
    public function getWidthField()
    {
        return $this->container['width_field'];
    }

    /**
     * Sets width_field
     *
     * @param string $width_field Field width.
     *
     * @return self
     */
    public function setWidthField($width_field)
    {

        if ((mb_strlen($width_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $width_field when calling FullWorkflowRequestWorkflowUserFieldsField., must be bigger than or equal to 1.');
        }

        $this->container['width_field'] = $width_field;

        return $this;
    }

    /**
     * Gets x_coordinate_field
     *
     * @return string
     */
    public function getXCoordinateField()
    {
        return $this->container['x_coordinate_field'];
    }

    /**
     * Sets x_coordinate_field
     *
     * @param string $x_coordinate_field The fields x-coordinates.
     *
     * @return self
     */
    public function setXCoordinateField($x_coordinate_field)
    {

        if ((mb_strlen($x_coordinate_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $x_coordinate_field when calling FullWorkflowRequestWorkflowUserFieldsField., must be bigger than or equal to 1.');
        }

        $this->container['x_coordinate_field'] = $x_coordinate_field;

        return $this;
    }

    /**
     * Gets x_offset_field
     *
     * @return float
     */
    public function getXOffsetField()
    {
        return $this->container['x_offset_field'];
    }

    /**
     * Sets x_offset_field
     *
     * @param float $x_offset_field The fields x-coordinates offset.
     *
     * @return self
     */
    public function setXOffsetField($x_offset_field)
    {
        $this->container['x_offset_field'] = $x_offset_field;

        return $this;
    }

    /**
     * Gets y_coordinate_field
     *
     * @return string
     */
    public function getYCoordinateField()
    {
        return $this->container['y_coordinate_field'];
    }

    /**
     * Sets y_coordinate_field
     *
     * @param string $y_coordinate_field The fields y-coordinates.
     *
     * @return self
     */
    public function setYCoordinateField($y_coordinate_field)
    {

        if ((mb_strlen($y_coordinate_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $y_coordinate_field when calling FullWorkflowRequestWorkflowUserFieldsField., must be bigger than or equal to 1.');
        }

        $this->container['y_coordinate_field'] = $y_coordinate_field;

        return $this;
    }

    /**
     * Gets y_offset_field
     *
     * @return float
     */
    public function getYOffsetField()
    {
        return $this->container['y_offset_field'];
    }

    /**
     * Sets y_offset_field
     *
     * @param float $y_offset_field The fields y-coordinates offset.
     *
     * @return self
     */
    public function setYOffsetField($y_offset_field)
    {
        $this->container['y_offset_field'] = $y_offset_field;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


