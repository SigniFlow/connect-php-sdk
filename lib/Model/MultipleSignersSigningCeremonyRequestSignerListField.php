<?php
/**
 * MultipleSignersSigningCeremonyRequestSignerListField
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  SigniFlowConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SigniFlow OpenAPI Spec v1
 *
 * ## SigniFlow API used to automate esignature workflow creation and management.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SigniFlowConnect\Model;

use \ArrayAccess;
use \SigniFlowConnect\ObjectSerializer;

/**
 * MultipleSignersSigningCeremonyRequestSignerListField Class Doc Comment
 *
 * @category Class
 * @package  SigniFlowConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class MultipleSignersSigningCeremonyRequestSignerListField implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MultipleSignersSigningCeremonyRequest_SignerListField';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'signature_h_field' => 'float',
        'signature_image_field' => 'string',
        'signature_image_include_border_field' => 'bool',
        'signature_image_include_reason_field' => 'bool',
        'signature_image_include_signed_by_field' => 'bool',
        'signature_image_include_signed_date_field' => 'bool',
        'signature_image_type_field' => 'float',
        'signature_page_field' => 'float',
        'signature_w_field' => 'float',
        'signature_x_field' => 'float',
        'signature_y_field' => 'float',
        'signer_email_field' => 'string',
        'signer_full_name_field' => 'string',
        'signer_indentification_number_field' => 'string',
        'signer_location_field' => 'string',
        'signer_mobile_number_field' => 'string',
        'signer_reason_field' => 'string',
        'signer_trust_origin_field' => 'string',
        'signer_trust_reference_field' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'signature_h_field' => null,
        'signature_image_field' => null,
        'signature_image_include_border_field' => null,
        'signature_image_include_reason_field' => null,
        'signature_image_include_signed_by_field' => null,
        'signature_image_include_signed_date_field' => null,
        'signature_image_type_field' => null,
        'signature_page_field' => null,
        'signature_w_field' => null,
        'signature_x_field' => null,
        'signature_y_field' => null,
        'signer_email_field' => null,
        'signer_full_name_field' => null,
        'signer_indentification_number_field' => null,
        'signer_location_field' => null,
        'signer_mobile_number_field' => null,
        'signer_reason_field' => null,
        'signer_trust_origin_field' => null,
        'signer_trust_reference_field' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'signature_h_field' => 'SignatureHField',
        'signature_image_field' => 'SignatureImageField',
        'signature_image_include_border_field' => 'SignatureImageIncludeBorderField',
        'signature_image_include_reason_field' => 'SignatureImageIncludeReasonField',
        'signature_image_include_signed_by_field' => 'SignatureImageIncludeSignedByField',
        'signature_image_include_signed_date_field' => 'SignatureImageIncludeSignedDateField',
        'signature_image_type_field' => 'SignatureImageTypeField',
        'signature_page_field' => 'SignaturePageField',
        'signature_w_field' => 'SignatureWField',
        'signature_x_field' => 'SignatureXField',
        'signature_y_field' => 'SignatureYField',
        'signer_email_field' => 'SignerEmailField',
        'signer_full_name_field' => 'SignerFullNameField',
        'signer_indentification_number_field' => 'SignerIndentificationNumberField',
        'signer_location_field' => 'SignerLocationField',
        'signer_mobile_number_field' => 'SignerMobileNumberField',
        'signer_reason_field' => 'SignerReasonField',
        'signer_trust_origin_field' => 'SignerTrustOriginField',
        'signer_trust_reference_field' => 'SignerTrustReferenceField'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'signature_h_field' => 'setSignatureHField',
        'signature_image_field' => 'setSignatureImageField',
        'signature_image_include_border_field' => 'setSignatureImageIncludeBorderField',
        'signature_image_include_reason_field' => 'setSignatureImageIncludeReasonField',
        'signature_image_include_signed_by_field' => 'setSignatureImageIncludeSignedByField',
        'signature_image_include_signed_date_field' => 'setSignatureImageIncludeSignedDateField',
        'signature_image_type_field' => 'setSignatureImageTypeField',
        'signature_page_field' => 'setSignaturePageField',
        'signature_w_field' => 'setSignatureWField',
        'signature_x_field' => 'setSignatureXField',
        'signature_y_field' => 'setSignatureYField',
        'signer_email_field' => 'setSignerEmailField',
        'signer_full_name_field' => 'setSignerFullNameField',
        'signer_indentification_number_field' => 'setSignerIndentificationNumberField',
        'signer_location_field' => 'setSignerLocationField',
        'signer_mobile_number_field' => 'setSignerMobileNumberField',
        'signer_reason_field' => 'setSignerReasonField',
        'signer_trust_origin_field' => 'setSignerTrustOriginField',
        'signer_trust_reference_field' => 'setSignerTrustReferenceField'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'signature_h_field' => 'getSignatureHField',
        'signature_image_field' => 'getSignatureImageField',
        'signature_image_include_border_field' => 'getSignatureImageIncludeBorderField',
        'signature_image_include_reason_field' => 'getSignatureImageIncludeReasonField',
        'signature_image_include_signed_by_field' => 'getSignatureImageIncludeSignedByField',
        'signature_image_include_signed_date_field' => 'getSignatureImageIncludeSignedDateField',
        'signature_image_type_field' => 'getSignatureImageTypeField',
        'signature_page_field' => 'getSignaturePageField',
        'signature_w_field' => 'getSignatureWField',
        'signature_x_field' => 'getSignatureXField',
        'signature_y_field' => 'getSignatureYField',
        'signer_email_field' => 'getSignerEmailField',
        'signer_full_name_field' => 'getSignerFullNameField',
        'signer_indentification_number_field' => 'getSignerIndentificationNumberField',
        'signer_location_field' => 'getSignerLocationField',
        'signer_mobile_number_field' => 'getSignerMobileNumberField',
        'signer_reason_field' => 'getSignerReasonField',
        'signer_trust_origin_field' => 'getSignerTrustOriginField',
        'signer_trust_reference_field' => 'getSignerTrustReferenceField'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['signature_h_field'] = $data['signature_h_field'] ?? null;
        $this->container['signature_image_field'] = $data['signature_image_field'] ?? null;
        $this->container['signature_image_include_border_field'] = $data['signature_image_include_border_field'] ?? null;
        $this->container['signature_image_include_reason_field'] = $data['signature_image_include_reason_field'] ?? null;
        $this->container['signature_image_include_signed_by_field'] = $data['signature_image_include_signed_by_field'] ?? null;
        $this->container['signature_image_include_signed_date_field'] = $data['signature_image_include_signed_date_field'] ?? null;
        $this->container['signature_image_type_field'] = $data['signature_image_type_field'] ?? null;
        $this->container['signature_page_field'] = $data['signature_page_field'] ?? null;
        $this->container['signature_w_field'] = $data['signature_w_field'] ?? null;
        $this->container['signature_x_field'] = $data['signature_x_field'] ?? null;
        $this->container['signature_y_field'] = $data['signature_y_field'] ?? null;
        $this->container['signer_email_field'] = $data['signer_email_field'] ?? null;
        $this->container['signer_full_name_field'] = $data['signer_full_name_field'] ?? null;
        $this->container['signer_indentification_number_field'] = $data['signer_indentification_number_field'] ?? null;
        $this->container['signer_location_field'] = $data['signer_location_field'] ?? null;
        $this->container['signer_mobile_number_field'] = $data['signer_mobile_number_field'] ?? null;
        $this->container['signer_reason_field'] = $data['signer_reason_field'] ?? null;
        $this->container['signer_trust_origin_field'] = $data['signer_trust_origin_field'] ?? null;
        $this->container['signer_trust_reference_field'] = $data['signer_trust_reference_field'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['signature_h_field'] === null) {
            $invalidProperties[] = "'signature_h_field' can't be null";
        }
        if ($this->container['signature_image_field'] === null) {
            $invalidProperties[] = "'signature_image_field' can't be null";
        }
        if ((mb_strlen($this->container['signature_image_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'signature_image_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['signature_image_include_border_field'] === null) {
            $invalidProperties[] = "'signature_image_include_border_field' can't be null";
        }
        if ($this->container['signature_image_include_reason_field'] === null) {
            $invalidProperties[] = "'signature_image_include_reason_field' can't be null";
        }
        if ($this->container['signature_image_include_signed_by_field'] === null) {
            $invalidProperties[] = "'signature_image_include_signed_by_field' can't be null";
        }
        if ($this->container['signature_image_include_signed_date_field'] === null) {
            $invalidProperties[] = "'signature_image_include_signed_date_field' can't be null";
        }
        if ($this->container['signature_image_type_field'] === null) {
            $invalidProperties[] = "'signature_image_type_field' can't be null";
        }
        if ($this->container['signature_page_field'] === null) {
            $invalidProperties[] = "'signature_page_field' can't be null";
        }
        if ($this->container['signature_w_field'] === null) {
            $invalidProperties[] = "'signature_w_field' can't be null";
        }
        if ($this->container['signature_x_field'] === null) {
            $invalidProperties[] = "'signature_x_field' can't be null";
        }
        if ($this->container['signature_y_field'] === null) {
            $invalidProperties[] = "'signature_y_field' can't be null";
        }
        if ($this->container['signer_email_field'] === null) {
            $invalidProperties[] = "'signer_email_field' can't be null";
        }
        if ((mb_strlen($this->container['signer_email_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'signer_email_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['signer_full_name_field'] === null) {
            $invalidProperties[] = "'signer_full_name_field' can't be null";
        }
        if ((mb_strlen($this->container['signer_full_name_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'signer_full_name_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['signer_indentification_number_field'] === null) {
            $invalidProperties[] = "'signer_indentification_number_field' can't be null";
        }
        if ((mb_strlen($this->container['signer_indentification_number_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'signer_indentification_number_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['signer_location_field'] === null) {
            $invalidProperties[] = "'signer_location_field' can't be null";
        }
        if ((mb_strlen($this->container['signer_location_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'signer_location_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['signer_mobile_number_field'] === null) {
            $invalidProperties[] = "'signer_mobile_number_field' can't be null";
        }
        if ((mb_strlen($this->container['signer_mobile_number_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'signer_mobile_number_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['signer_reason_field'] === null) {
            $invalidProperties[] = "'signer_reason_field' can't be null";
        }
        if ((mb_strlen($this->container['signer_reason_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'signer_reason_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['signer_trust_origin_field'] === null) {
            $invalidProperties[] = "'signer_trust_origin_field' can't be null";
        }
        if ((mb_strlen($this->container['signer_trust_origin_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'signer_trust_origin_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['signer_trust_reference_field'] === null) {
            $invalidProperties[] = "'signer_trust_reference_field' can't be null";
        }
        if ((mb_strlen($this->container['signer_trust_reference_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'signer_trust_reference_field', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets signature_h_field
     *
     * @return float
     */
    public function getSignatureHField()
    {
        return $this->container['signature_h_field'];
    }

    /**
     * Sets signature_h_field
     *
     * @param float $signature_h_field signature_h_field
     *
     * @return self
     */
    public function setSignatureHField($signature_h_field)
    {
        $this->container['signature_h_field'] = $signature_h_field;

        return $this;
    }

    /**
     * Gets signature_image_field
     *
     * @return string
     */
    public function getSignatureImageField()
    {
        return $this->container['signature_image_field'];
    }

    /**
     * Sets signature_image_field
     *
     * @param string $signature_image_field signature_image_field
     *
     * @return self
     */
    public function setSignatureImageField($signature_image_field)
    {

        if ((mb_strlen($signature_image_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $signature_image_field when calling MultipleSignersSigningCeremonyRequestSignerListField., must be bigger than or equal to 1.');
        }

        $this->container['signature_image_field'] = $signature_image_field;

        return $this;
    }

    /**
     * Gets signature_image_include_border_field
     *
     * @return bool
     */
    public function getSignatureImageIncludeBorderField()
    {
        return $this->container['signature_image_include_border_field'];
    }

    /**
     * Sets signature_image_include_border_field
     *
     * @param bool $signature_image_include_border_field signature_image_include_border_field
     *
     * @return self
     */
    public function setSignatureImageIncludeBorderField($signature_image_include_border_field)
    {
        $this->container['signature_image_include_border_field'] = $signature_image_include_border_field;

        return $this;
    }

    /**
     * Gets signature_image_include_reason_field
     *
     * @return bool
     */
    public function getSignatureImageIncludeReasonField()
    {
        return $this->container['signature_image_include_reason_field'];
    }

    /**
     * Sets signature_image_include_reason_field
     *
     * @param bool $signature_image_include_reason_field signature_image_include_reason_field
     *
     * @return self
     */
    public function setSignatureImageIncludeReasonField($signature_image_include_reason_field)
    {
        $this->container['signature_image_include_reason_field'] = $signature_image_include_reason_field;

        return $this;
    }

    /**
     * Gets signature_image_include_signed_by_field
     *
     * @return bool
     */
    public function getSignatureImageIncludeSignedByField()
    {
        return $this->container['signature_image_include_signed_by_field'];
    }

    /**
     * Sets signature_image_include_signed_by_field
     *
     * @param bool $signature_image_include_signed_by_field signature_image_include_signed_by_field
     *
     * @return self
     */
    public function setSignatureImageIncludeSignedByField($signature_image_include_signed_by_field)
    {
        $this->container['signature_image_include_signed_by_field'] = $signature_image_include_signed_by_field;

        return $this;
    }

    /**
     * Gets signature_image_include_signed_date_field
     *
     * @return bool
     */
    public function getSignatureImageIncludeSignedDateField()
    {
        return $this->container['signature_image_include_signed_date_field'];
    }

    /**
     * Sets signature_image_include_signed_date_field
     *
     * @param bool $signature_image_include_signed_date_field signature_image_include_signed_date_field
     *
     * @return self
     */
    public function setSignatureImageIncludeSignedDateField($signature_image_include_signed_date_field)
    {
        $this->container['signature_image_include_signed_date_field'] = $signature_image_include_signed_date_field;

        return $this;
    }

    /**
     * Gets signature_image_type_field
     *
     * @return float
     */
    public function getSignatureImageTypeField()
    {
        return $this->container['signature_image_type_field'];
    }

    /**
     * Sets signature_image_type_field
     *
     * @param float $signature_image_type_field signature_image_type_field
     *
     * @return self
     */
    public function setSignatureImageTypeField($signature_image_type_field)
    {
        $this->container['signature_image_type_field'] = $signature_image_type_field;

        return $this;
    }

    /**
     * Gets signature_page_field
     *
     * @return float
     */
    public function getSignaturePageField()
    {
        return $this->container['signature_page_field'];
    }

    /**
     * Sets signature_page_field
     *
     * @param float $signature_page_field signature_page_field
     *
     * @return self
     */
    public function setSignaturePageField($signature_page_field)
    {
        $this->container['signature_page_field'] = $signature_page_field;

        return $this;
    }

    /**
     * Gets signature_w_field
     *
     * @return float
     */
    public function getSignatureWField()
    {
        return $this->container['signature_w_field'];
    }

    /**
     * Sets signature_w_field
     *
     * @param float $signature_w_field signature_w_field
     *
     * @return self
     */
    public function setSignatureWField($signature_w_field)
    {
        $this->container['signature_w_field'] = $signature_w_field;

        return $this;
    }

    /**
     * Gets signature_x_field
     *
     * @return float
     */
    public function getSignatureXField()
    {
        return $this->container['signature_x_field'];
    }

    /**
     * Sets signature_x_field
     *
     * @param float $signature_x_field signature_x_field
     *
     * @return self
     */
    public function setSignatureXField($signature_x_field)
    {
        $this->container['signature_x_field'] = $signature_x_field;

        return $this;
    }

    /**
     * Gets signature_y_field
     *
     * @return float
     */
    public function getSignatureYField()
    {
        return $this->container['signature_y_field'];
    }

    /**
     * Sets signature_y_field
     *
     * @param float $signature_y_field signature_y_field
     *
     * @return self
     */
    public function setSignatureYField($signature_y_field)
    {
        $this->container['signature_y_field'] = $signature_y_field;

        return $this;
    }

    /**
     * Gets signer_email_field
     *
     * @return string
     */
    public function getSignerEmailField()
    {
        return $this->container['signer_email_field'];
    }

    /**
     * Sets signer_email_field
     *
     * @param string $signer_email_field signer_email_field
     *
     * @return self
     */
    public function setSignerEmailField($signer_email_field)
    {

        if ((mb_strlen($signer_email_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $signer_email_field when calling MultipleSignersSigningCeremonyRequestSignerListField., must be bigger than or equal to 1.');
        }

        $this->container['signer_email_field'] = $signer_email_field;

        return $this;
    }

    /**
     * Gets signer_full_name_field
     *
     * @return string
     */
    public function getSignerFullNameField()
    {
        return $this->container['signer_full_name_field'];
    }

    /**
     * Sets signer_full_name_field
     *
     * @param string $signer_full_name_field signer_full_name_field
     *
     * @return self
     */
    public function setSignerFullNameField($signer_full_name_field)
    {

        if ((mb_strlen($signer_full_name_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $signer_full_name_field when calling MultipleSignersSigningCeremonyRequestSignerListField., must be bigger than or equal to 1.');
        }

        $this->container['signer_full_name_field'] = $signer_full_name_field;

        return $this;
    }

    /**
     * Gets signer_indentification_number_field
     *
     * @return string
     */
    public function getSignerIndentificationNumberField()
    {
        return $this->container['signer_indentification_number_field'];
    }

    /**
     * Sets signer_indentification_number_field
     *
     * @param string $signer_indentification_number_field signer_indentification_number_field
     *
     * @return self
     */
    public function setSignerIndentificationNumberField($signer_indentification_number_field)
    {

        if ((mb_strlen($signer_indentification_number_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $signer_indentification_number_field when calling MultipleSignersSigningCeremonyRequestSignerListField., must be bigger than or equal to 1.');
        }

        $this->container['signer_indentification_number_field'] = $signer_indentification_number_field;

        return $this;
    }

    /**
     * Gets signer_location_field
     *
     * @return string
     */
    public function getSignerLocationField()
    {
        return $this->container['signer_location_field'];
    }

    /**
     * Sets signer_location_field
     *
     * @param string $signer_location_field signer_location_field
     *
     * @return self
     */
    public function setSignerLocationField($signer_location_field)
    {

        if ((mb_strlen($signer_location_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $signer_location_field when calling MultipleSignersSigningCeremonyRequestSignerListField., must be bigger than or equal to 1.');
        }

        $this->container['signer_location_field'] = $signer_location_field;

        return $this;
    }

    /**
     * Gets signer_mobile_number_field
     *
     * @return string
     */
    public function getSignerMobileNumberField()
    {
        return $this->container['signer_mobile_number_field'];
    }

    /**
     * Sets signer_mobile_number_field
     *
     * @param string $signer_mobile_number_field signer_mobile_number_field
     *
     * @return self
     */
    public function setSignerMobileNumberField($signer_mobile_number_field)
    {

        if ((mb_strlen($signer_mobile_number_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $signer_mobile_number_field when calling MultipleSignersSigningCeremonyRequestSignerListField., must be bigger than or equal to 1.');
        }

        $this->container['signer_mobile_number_field'] = $signer_mobile_number_field;

        return $this;
    }

    /**
     * Gets signer_reason_field
     *
     * @return string
     */
    public function getSignerReasonField()
    {
        return $this->container['signer_reason_field'];
    }

    /**
     * Sets signer_reason_field
     *
     * @param string $signer_reason_field signer_reason_field
     *
     * @return self
     */
    public function setSignerReasonField($signer_reason_field)
    {

        if ((mb_strlen($signer_reason_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $signer_reason_field when calling MultipleSignersSigningCeremonyRequestSignerListField., must be bigger than or equal to 1.');
        }

        $this->container['signer_reason_field'] = $signer_reason_field;

        return $this;
    }

    /**
     * Gets signer_trust_origin_field
     *
     * @return string
     */
    public function getSignerTrustOriginField()
    {
        return $this->container['signer_trust_origin_field'];
    }

    /**
     * Sets signer_trust_origin_field
     *
     * @param string $signer_trust_origin_field signer_trust_origin_field
     *
     * @return self
     */
    public function setSignerTrustOriginField($signer_trust_origin_field)
    {

        if ((mb_strlen($signer_trust_origin_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $signer_trust_origin_field when calling MultipleSignersSigningCeremonyRequestSignerListField., must be bigger than or equal to 1.');
        }

        $this->container['signer_trust_origin_field'] = $signer_trust_origin_field;

        return $this;
    }

    /**
     * Gets signer_trust_reference_field
     *
     * @return string
     */
    public function getSignerTrustReferenceField()
    {
        return $this->container['signer_trust_reference_field'];
    }

    /**
     * Sets signer_trust_reference_field
     *
     * @param string $signer_trust_reference_field signer_trust_reference_field
     *
     * @return self
     */
    public function setSignerTrustReferenceField($signer_trust_reference_field)
    {

        if ((mb_strlen($signer_trust_reference_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $signer_trust_reference_field when calling MultipleSignersSigningCeremonyRequestSignerListField., must be bigger than or equal to 1.');
        }

        $this->container['signer_trust_reference_field'] = $signer_trust_reference_field;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


