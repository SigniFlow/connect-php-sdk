<?php
/**
 * FullWorkflowRequestWorkflowUsersListField
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  SigniFlowConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SigniFlow OpenAPI Spec v1
 *
 * ## SigniFlow API used to automate esignature workflow creation and management.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SigniFlowConnect\Model;

use \ArrayAccess;
use \SigniFlowConnect\ObjectSerializer;

/**
 * FullWorkflowRequestWorkflowUsersListField Class Doc Comment
 *
 * @category Class
 * @package  SigniFlowConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class FullWorkflowRequestWorkflowUsersListField implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FullWorkflowRequest_WorkflowUsersListField';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'action_field' => 'float',
        'allow_proxy_field' => 'float',
        'auto_sign_field' => 'bool',
        'email_address_field' => 'string',
        'group_step_field' => '\SigniFlowConnect\Model\FullWorkflowRequestGroupStepField',
        'language_code_field' => 'string',
        'latitude_field' => 'string',
        'longitude_field' => 'string',
        'mobile_number_field' => 'string',
        'preloaded_face_to_face_signers_field' => 'object[]',
        'sign_reason_field' => 'string',
        'signer_password_field' => 'string',
        'user_first_name_field' => 'string',
        'user_full_name_field' => 'string',
        'user_last_name_field' => 'string',
        'workflow_user_fields_field' => '\SigniFlowConnect\Model\FullWorkflowRequestWorkflowUserFieldsField[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'action_field' => null,
        'allow_proxy_field' => null,
        'auto_sign_field' => null,
        'email_address_field' => null,
        'group_step_field' => null,
        'language_code_field' => null,
        'latitude_field' => null,
        'longitude_field' => null,
        'mobile_number_field' => null,
        'preloaded_face_to_face_signers_field' => null,
        'sign_reason_field' => null,
        'signer_password_field' => 'password',
        'user_first_name_field' => null,
        'user_full_name_field' => null,
        'user_last_name_field' => null,
        'workflow_user_fields_field' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'action_field' => 'ActionField',
        'allow_proxy_field' => 'AllowProxyField',
        'auto_sign_field' => 'AutoSignField',
        'email_address_field' => 'EmailAddressField',
        'group_step_field' => 'GroupStepField',
        'language_code_field' => 'LanguageCodeField',
        'latitude_field' => 'LatitudeField',
        'longitude_field' => 'LongitudeField',
        'mobile_number_field' => 'MobileNumberField',
        'preloaded_face_to_face_signers_field' => 'PreloadedFaceToFaceSignersField',
        'sign_reason_field' => 'SignReasonField',
        'signer_password_field' => 'SignerPasswordField',
        'user_first_name_field' => 'UserFirstNameField',
        'user_full_name_field' => 'UserFullNameField',
        'user_last_name_field' => 'UserLastNameField',
        'workflow_user_fields_field' => 'WorkflowUserFieldsField'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'action_field' => 'setActionField',
        'allow_proxy_field' => 'setAllowProxyField',
        'auto_sign_field' => 'setAutoSignField',
        'email_address_field' => 'setEmailAddressField',
        'group_step_field' => 'setGroupStepField',
        'language_code_field' => 'setLanguageCodeField',
        'latitude_field' => 'setLatitudeField',
        'longitude_field' => 'setLongitudeField',
        'mobile_number_field' => 'setMobileNumberField',
        'preloaded_face_to_face_signers_field' => 'setPreloadedFaceToFaceSignersField',
        'sign_reason_field' => 'setSignReasonField',
        'signer_password_field' => 'setSignerPasswordField',
        'user_first_name_field' => 'setUserFirstNameField',
        'user_full_name_field' => 'setUserFullNameField',
        'user_last_name_field' => 'setUserLastNameField',
        'workflow_user_fields_field' => 'setWorkflowUserFieldsField'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'action_field' => 'getActionField',
        'allow_proxy_field' => 'getAllowProxyField',
        'auto_sign_field' => 'getAutoSignField',
        'email_address_field' => 'getEmailAddressField',
        'group_step_field' => 'getGroupStepField',
        'language_code_field' => 'getLanguageCodeField',
        'latitude_field' => 'getLatitudeField',
        'longitude_field' => 'getLongitudeField',
        'mobile_number_field' => 'getMobileNumberField',
        'preloaded_face_to_face_signers_field' => 'getPreloadedFaceToFaceSignersField',
        'sign_reason_field' => 'getSignReasonField',
        'signer_password_field' => 'getSignerPasswordField',
        'user_first_name_field' => 'getUserFirstNameField',
        'user_full_name_field' => 'getUserFullNameField',
        'user_last_name_field' => 'getUserLastNameField',
        'workflow_user_fields_field' => 'getWorkflowUserFieldsField'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['action_field'] = $data['action_field'] ?? null;
        $this->container['allow_proxy_field'] = $data['allow_proxy_field'] ?? null;
        $this->container['auto_sign_field'] = $data['auto_sign_field'] ?? null;
        $this->container['email_address_field'] = $data['email_address_field'] ?? null;
        $this->container['group_step_field'] = $data['group_step_field'] ?? null;
        $this->container['language_code_field'] = $data['language_code_field'] ?? null;
        $this->container['latitude_field'] = $data['latitude_field'] ?? null;
        $this->container['longitude_field'] = $data['longitude_field'] ?? null;
        $this->container['mobile_number_field'] = $data['mobile_number_field'] ?? null;
        $this->container['preloaded_face_to_face_signers_field'] = $data['preloaded_face_to_face_signers_field'] ?? null;
        $this->container['sign_reason_field'] = $data['sign_reason_field'] ?? null;
        $this->container['signer_password_field'] = $data['signer_password_field'] ?? null;
        $this->container['user_first_name_field'] = $data['user_first_name_field'] ?? null;
        $this->container['user_full_name_field'] = $data['user_full_name_field'] ?? null;
        $this->container['user_last_name_field'] = $data['user_last_name_field'] ?? null;
        $this->container['workflow_user_fields_field'] = $data['workflow_user_fields_field'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['action_field'] === null) {
            $invalidProperties[] = "'action_field' can't be null";
        }
        if ($this->container['allow_proxy_field'] === null) {
            $invalidProperties[] = "'allow_proxy_field' can't be null";
        }
        if ($this->container['auto_sign_field'] === null) {
            $invalidProperties[] = "'auto_sign_field' can't be null";
        }
        if ($this->container['email_address_field'] === null) {
            $invalidProperties[] = "'email_address_field' can't be null";
        }
        if ((mb_strlen($this->container['email_address_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'email_address_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['language_code_field'] === null) {
            $invalidProperties[] = "'language_code_field' can't be null";
        }
        if ((mb_strlen($this->container['language_code_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'language_code_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['latitude_field'] === null) {
            $invalidProperties[] = "'latitude_field' can't be null";
        }
        if ((mb_strlen($this->container['latitude_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'latitude_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['longitude_field'] === null) {
            $invalidProperties[] = "'longitude_field' can't be null";
        }
        if ((mb_strlen($this->container['longitude_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'longitude_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['mobile_number_field'] === null) {
            $invalidProperties[] = "'mobile_number_field' can't be null";
        }
        if ((mb_strlen($this->container['mobile_number_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'mobile_number_field', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['preloaded_face_to_face_signers_field']) && (count($this->container['preloaded_face_to_face_signers_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'preloaded_face_to_face_signers_field', number of items must be greater than or equal to 1.";
        }

        if ($this->container['sign_reason_field'] === null) {
            $invalidProperties[] = "'sign_reason_field' can't be null";
        }
        if ((mb_strlen($this->container['sign_reason_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'sign_reason_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['signer_password_field'] === null) {
            $invalidProperties[] = "'signer_password_field' can't be null";
        }
        if ((mb_strlen($this->container['signer_password_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'signer_password_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['user_first_name_field'] === null) {
            $invalidProperties[] = "'user_first_name_field' can't be null";
        }
        if ((mb_strlen($this->container['user_first_name_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'user_first_name_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['user_full_name_field'] === null) {
            $invalidProperties[] = "'user_full_name_field' can't be null";
        }
        if ((mb_strlen($this->container['user_full_name_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'user_full_name_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['user_last_name_field'] === null) {
            $invalidProperties[] = "'user_last_name_field' can't be null";
        }
        if ((mb_strlen($this->container['user_last_name_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'user_last_name_field', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['workflow_user_fields_field']) && (count($this->container['workflow_user_fields_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'workflow_user_fields_field', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets action_field
     *
     * @return float
     */
    public function getActionField()
    {
        return $this->container['action_field'];
    }

    /**
     * Sets action_field
     *
     * @param float $action_field Refers to the order of signatures from the users.
     *
     * @return self
     */
    public function setActionField($action_field)
    {
        $this->container['action_field'] = $action_field;

        return $this;
    }

    /**
     * Gets allow_proxy_field
     *
     * @return float
     */
    public function getAllowProxyField()
    {
        return $this->container['allow_proxy_field'];
    }

    /**
     * Sets allow_proxy_field
     *
     * @param float $allow_proxy_field Allow proxy confirmation field.
     *
     * @return self
     */
    public function setAllowProxyField($allow_proxy_field)
    {
        $this->container['allow_proxy_field'] = $allow_proxy_field;

        return $this;
    }

    /**
     * Gets auto_sign_field
     *
     * @return bool
     */
    public function getAutoSignField()
    {
        return $this->container['auto_sign_field'];
    }

    /**
     * Sets auto_sign_field
     *
     * @param bool $auto_sign_field ### Enable auto sign.  `True = Signature will be applied automaticly False = User will need to login and Sign`
     *
     * @return self
     */
    public function setAutoSignField($auto_sign_field)
    {
        $this->container['auto_sign_field'] = $auto_sign_field;

        return $this;
    }

    /**
     * Gets email_address_field
     *
     * @return string
     */
    public function getEmailAddressField()
    {
        return $this->container['email_address_field'];
    }

    /**
     * Sets email_address_field
     *
     * @param string $email_address_field Workflow user's email addresses.
     *
     * @return self
     */
    public function setEmailAddressField($email_address_field)
    {

        if ((mb_strlen($email_address_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $email_address_field when calling FullWorkflowRequestWorkflowUsersListField., must be bigger than or equal to 1.');
        }

        $this->container['email_address_field'] = $email_address_field;

        return $this;
    }

    /**
     * Gets group_step_field
     *
     * @return \SigniFlowConnect\Model\FullWorkflowRequestGroupStepField|null
     */
    public function getGroupStepField()
    {
        return $this->container['group_step_field'];
    }

    /**
     * Sets group_step_field
     *
     * @param \SigniFlowConnect\Model\FullWorkflowRequestGroupStepField|null $group_step_field group_step_field
     *
     * @return self
     */
    public function setGroupStepField($group_step_field)
    {
        $this->container['group_step_field'] = $group_step_field;

        return $this;
    }

    /**
     * Gets language_code_field
     *
     * @return string
     */
    public function getLanguageCodeField()
    {
        return $this->container['language_code_field'];
    }

    /**
     * Sets language_code_field
     *
     * @param string $language_code_field #### Sets the display language for the user ##### ISO 2 Digit Code  `en = English es = Spanish fr = French`
     *
     * @return self
     */
    public function setLanguageCodeField($language_code_field)
    {

        if ((mb_strlen($language_code_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $language_code_field when calling FullWorkflowRequestWorkflowUsersListField., must be bigger than or equal to 1.');
        }

        $this->container['language_code_field'] = $language_code_field;

        return $this;
    }

    /**
     * Gets latitude_field
     *
     * @return string
     */
    public function getLatitudeField()
    {
        return $this->container['latitude_field'];
    }

    /**
     * Sets latitude_field
     *
     * @param string $latitude_field Location latitude.
     *
     * @return self
     */
    public function setLatitudeField($latitude_field)
    {

        if ((mb_strlen($latitude_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $latitude_field when calling FullWorkflowRequestWorkflowUsersListField., must be bigger than or equal to 1.');
        }

        $this->container['latitude_field'] = $latitude_field;

        return $this;
    }

    /**
     * Gets longitude_field
     *
     * @return string
     */
    public function getLongitudeField()
    {
        return $this->container['longitude_field'];
    }

    /**
     * Sets longitude_field
     *
     * @param string $longitude_field Location longtitude.
     *
     * @return self
     */
    public function setLongitudeField($longitude_field)
    {

        if ((mb_strlen($longitude_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $longitude_field when calling FullWorkflowRequestWorkflowUsersListField., must be bigger than or equal to 1.');
        }

        $this->container['longitude_field'] = $longitude_field;

        return $this;
    }

    /**
     * Gets mobile_number_field
     *
     * @return string
     */
    public function getMobileNumberField()
    {
        return $this->container['mobile_number_field'];
    }

    /**
     * Sets mobile_number_field
     *
     * @param string $mobile_number_field Group user's mobile number.
     *
     * @return self
     */
    public function setMobileNumberField($mobile_number_field)
    {

        if ((mb_strlen($mobile_number_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $mobile_number_field when calling FullWorkflowRequestWorkflowUsersListField., must be bigger than or equal to 1.');
        }

        $this->container['mobile_number_field'] = $mobile_number_field;

        return $this;
    }

    /**
     * Gets preloaded_face_to_face_signers_field
     *
     * @return object[]|null
     */
    public function getPreloadedFaceToFaceSignersField()
    {
        return $this->container['preloaded_face_to_face_signers_field'];
    }

    /**
     * Sets preloaded_face_to_face_signers_field
     *
     * @param object[]|null $preloaded_face_to_face_signers_field Preloaded user's who will be using the face to face signature field.
     *
     * @return self
     */
    public function setPreloadedFaceToFaceSignersField($preloaded_face_to_face_signers_field)
    {


        if (!is_null($preloaded_face_to_face_signers_field) && (count($preloaded_face_to_face_signers_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $preloaded_face_to_face_signers_field when calling FullWorkflowRequestWorkflowUsersListField., number of items must be greater than or equal to 1.');
        }
        $this->container['preloaded_face_to_face_signers_field'] = $preloaded_face_to_face_signers_field;

        return $this;
    }

    /**
     * Gets sign_reason_field
     *
     * @return string
     */
    public function getSignReasonField()
    {
        return $this->container['sign_reason_field'];
    }

    /**
     * Sets sign_reason_field
     *
     * @param string $sign_reason_field Reason for signature.
     *
     * @return self
     */
    public function setSignReasonField($sign_reason_field)
    {

        if ((mb_strlen($sign_reason_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sign_reason_field when calling FullWorkflowRequestWorkflowUsersListField., must be bigger than or equal to 1.');
        }

        $this->container['sign_reason_field'] = $sign_reason_field;

        return $this;
    }

    /**
     * Gets signer_password_field
     *
     * @return string
     */
    public function getSignerPasswordField()
    {
        return $this->container['signer_password_field'];
    }

    /**
     * Sets signer_password_field
     *
     * @param string $signer_password_field Face to face user's password.
     *
     * @return self
     */
    public function setSignerPasswordField($signer_password_field)
    {

        if ((mb_strlen($signer_password_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $signer_password_field when calling FullWorkflowRequestWorkflowUsersListField., must be bigger than or equal to 1.');
        }

        $this->container['signer_password_field'] = $signer_password_field;

        return $this;
    }

    /**
     * Gets user_first_name_field
     *
     * @return string
     */
    public function getUserFirstNameField()
    {
        return $this->container['user_first_name_field'];
    }

    /**
     * Sets user_first_name_field
     *
     * @param string $user_first_name_field Face to face user's first name.
     *
     * @return self
     */
    public function setUserFirstNameField($user_first_name_field)
    {

        if ((mb_strlen($user_first_name_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $user_first_name_field when calling FullWorkflowRequestWorkflowUsersListField., must be bigger than or equal to 1.');
        }

        $this->container['user_first_name_field'] = $user_first_name_field;

        return $this;
    }

    /**
     * Gets user_full_name_field
     *
     * @return string
     */
    public function getUserFullNameField()
    {
        return $this->container['user_full_name_field'];
    }

    /**
     * Sets user_full_name_field
     *
     * @param string $user_full_name_field Face to face user's full name.
     *
     * @return self
     */
    public function setUserFullNameField($user_full_name_field)
    {

        if ((mb_strlen($user_full_name_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $user_full_name_field when calling FullWorkflowRequestWorkflowUsersListField., must be bigger than or equal to 1.');
        }

        $this->container['user_full_name_field'] = $user_full_name_field;

        return $this;
    }

    /**
     * Gets user_last_name_field
     *
     * @return string
     */
    public function getUserLastNameField()
    {
        return $this->container['user_last_name_field'];
    }

    /**
     * Sets user_last_name_field
     *
     * @param string $user_last_name_field Face to face user's last name.
     *
     * @return self
     */
    public function setUserLastNameField($user_last_name_field)
    {

        if ((mb_strlen($user_last_name_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $user_last_name_field when calling FullWorkflowRequestWorkflowUsersListField., must be bigger than or equal to 1.');
        }

        $this->container['user_last_name_field'] = $user_last_name_field;

        return $this;
    }

    /**
     * Gets workflow_user_fields_field
     *
     * @return \SigniFlowConnect\Model\FullWorkflowRequestWorkflowUserFieldsField[]|null
     */
    public function getWorkflowUserFieldsField()
    {
        return $this->container['workflow_user_fields_field'];
    }

    /**
     * Sets workflow_user_fields_field
     *
     * @param \SigniFlowConnect\Model\FullWorkflowRequestWorkflowUserFieldsField[]|null $workflow_user_fields_field The list of the workflowed documents field.
     *
     * @return self
     */
    public function setWorkflowUserFieldsField($workflow_user_fields_field)
    {


        if (!is_null($workflow_user_fields_field) && (count($workflow_user_fields_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $workflow_user_fields_field when calling FullWorkflowRequestWorkflowUsersListField., number of items must be greater than or equal to 1.');
        }
        $this->container['workflow_user_fields_field'] = $workflow_user_fields_field;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


