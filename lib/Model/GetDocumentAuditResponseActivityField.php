<?php
/**
 * GetDocumentAuditResponseActivityField
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  SigniFlowConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SigniFlow OpenAPI Spec v1
 *
 * ## SigniFlow API used to automate esignature workflow creation and management.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SigniFlowConnect\Model;

use \ArrayAccess;
use \SigniFlowConnect\ObjectSerializer;

/**
 * GetDocumentAuditResponseActivityField Class Doc Comment
 *
 * @category Class
 * @package  SigniFlowConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class GetDocumentAuditResponseActivityField implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetDocumentAuditResponse_ActivityField';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'action_order_field' => 'string',
        'additional_field' => 'string',
        'doc_id_field' => 'string',
        'email_field' => 'string',
        'event_date_field' => 'string',
        'event_field' => 'string',
        'event_status_field' => 'string',
        'location_field' => 'string',
        'order_date_field' => 'string',
        'page_field' => 'string',
        'user_full_name_field' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'action_order_field' => null,
        'additional_field' => null,
        'doc_id_field' => null,
        'email_field' => 'email',
        'event_date_field' => null,
        'event_field' => null,
        'event_status_field' => null,
        'location_field' => null,
        'order_date_field' => null,
        'page_field' => null,
        'user_full_name_field' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'action_order_field' => 'ActionOrderField',
        'additional_field' => 'AdditionalField',
        'doc_id_field' => 'DocIDField',
        'email_field' => 'EmailField',
        'event_date_field' => 'EventDateField',
        'event_field' => 'EventField',
        'event_status_field' => 'EventStatusField',
        'location_field' => 'LocationField',
        'order_date_field' => 'OrderDateField',
        'page_field' => 'PageField',
        'user_full_name_field' => 'UserFullNameField'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'action_order_field' => 'setActionOrderField',
        'additional_field' => 'setAdditionalField',
        'doc_id_field' => 'setDocIdField',
        'email_field' => 'setEmailField',
        'event_date_field' => 'setEventDateField',
        'event_field' => 'setEventField',
        'event_status_field' => 'setEventStatusField',
        'location_field' => 'setLocationField',
        'order_date_field' => 'setOrderDateField',
        'page_field' => 'setPageField',
        'user_full_name_field' => 'setUserFullNameField'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'action_order_field' => 'getActionOrderField',
        'additional_field' => 'getAdditionalField',
        'doc_id_field' => 'getDocIdField',
        'email_field' => 'getEmailField',
        'event_date_field' => 'getEventDateField',
        'event_field' => 'getEventField',
        'event_status_field' => 'getEventStatusField',
        'location_field' => 'getLocationField',
        'order_date_field' => 'getOrderDateField',
        'page_field' => 'getPageField',
        'user_full_name_field' => 'getUserFullNameField'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['action_order_field'] = $data['action_order_field'] ?? null;
        $this->container['additional_field'] = $data['additional_field'] ?? null;
        $this->container['doc_id_field'] = $data['doc_id_field'] ?? null;
        $this->container['email_field'] = $data['email_field'] ?? null;
        $this->container['event_date_field'] = $data['event_date_field'] ?? null;
        $this->container['event_field'] = $data['event_field'] ?? null;
        $this->container['event_status_field'] = $data['event_status_field'] ?? null;
        $this->container['location_field'] = $data['location_field'] ?? null;
        $this->container['order_date_field'] = $data['order_date_field'] ?? null;
        $this->container['page_field'] = $data['page_field'] ?? null;
        $this->container['user_full_name_field'] = $data['user_full_name_field'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['action_order_field'] === null) {
            $invalidProperties[] = "'action_order_field' can't be null";
        }
        if ((mb_strlen($this->container['action_order_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'action_order_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['additional_field'] === null) {
            $invalidProperties[] = "'additional_field' can't be null";
        }
        if ((mb_strlen($this->container['additional_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'additional_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['doc_id_field'] === null) {
            $invalidProperties[] = "'doc_id_field' can't be null";
        }
        if ((mb_strlen($this->container['doc_id_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'doc_id_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['email_field'] === null) {
            $invalidProperties[] = "'email_field' can't be null";
        }
        if ((mb_strlen($this->container['email_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'email_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['event_date_field'] === null) {
            $invalidProperties[] = "'event_date_field' can't be null";
        }
        if ((mb_strlen($this->container['event_date_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'event_date_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['event_field'] === null) {
            $invalidProperties[] = "'event_field' can't be null";
        }
        if ((mb_strlen($this->container['event_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'event_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['event_status_field'] === null) {
            $invalidProperties[] = "'event_status_field' can't be null";
        }
        if ((mb_strlen($this->container['event_status_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'event_status_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['location_field'] === null) {
            $invalidProperties[] = "'location_field' can't be null";
        }
        if ((mb_strlen($this->container['location_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'location_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['order_date_field'] === null) {
            $invalidProperties[] = "'order_date_field' can't be null";
        }
        if ((mb_strlen($this->container['order_date_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'order_date_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['page_field'] === null) {
            $invalidProperties[] = "'page_field' can't be null";
        }
        if ((mb_strlen($this->container['page_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'page_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['user_full_name_field'] === null) {
            $invalidProperties[] = "'user_full_name_field' can't be null";
        }
        if ((mb_strlen($this->container['user_full_name_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'user_full_name_field', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets action_order_field
     *
     * @return string
     */
    public function getActionOrderField()
    {
        return $this->container['action_order_field'];
    }

    /**
     * Sets action_order_field
     *
     * @param string $action_order_field action_order_field
     *
     * @return self
     */
    public function setActionOrderField($action_order_field)
    {

        if ((mb_strlen($action_order_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $action_order_field when calling GetDocumentAuditResponseActivityField., must be bigger than or equal to 1.');
        }

        $this->container['action_order_field'] = $action_order_field;

        return $this;
    }

    /**
     * Gets additional_field
     *
     * @return string
     */
    public function getAdditionalField()
    {
        return $this->container['additional_field'];
    }

    /**
     * Sets additional_field
     *
     * @param string $additional_field additional_field
     *
     * @return self
     */
    public function setAdditionalField($additional_field)
    {

        if ((mb_strlen($additional_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $additional_field when calling GetDocumentAuditResponseActivityField., must be bigger than or equal to 1.');
        }

        $this->container['additional_field'] = $additional_field;

        return $this;
    }

    /**
     * Gets doc_id_field
     *
     * @return string
     */
    public function getDocIdField()
    {
        return $this->container['doc_id_field'];
    }

    /**
     * Sets doc_id_field
     *
     * @param string $doc_id_field doc_id_field
     *
     * @return self
     */
    public function setDocIdField($doc_id_field)
    {

        if ((mb_strlen($doc_id_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $doc_id_field when calling GetDocumentAuditResponseActivityField., must be bigger than or equal to 1.');
        }

        $this->container['doc_id_field'] = $doc_id_field;

        return $this;
    }

    /**
     * Gets email_field
     *
     * @return string
     */
    public function getEmailField()
    {
        return $this->container['email_field'];
    }

    /**
     * Sets email_field
     *
     * @param string $email_field The user's email.
     *
     * @return self
     */
    public function setEmailField($email_field)
    {

        if ((mb_strlen($email_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $email_field when calling GetDocumentAuditResponseActivityField., must be bigger than or equal to 1.');
        }

        $this->container['email_field'] = $email_field;

        return $this;
    }

    /**
     * Gets event_date_field
     *
     * @return string
     */
    public function getEventDateField()
    {
        return $this->container['event_date_field'];
    }

    /**
     * Sets event_date_field
     *
     * @param string $event_date_field event_date_field
     *
     * @return self
     */
    public function setEventDateField($event_date_field)
    {

        if ((mb_strlen($event_date_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $event_date_field when calling GetDocumentAuditResponseActivityField., must be bigger than or equal to 1.');
        }

        $this->container['event_date_field'] = $event_date_field;

        return $this;
    }

    /**
     * Gets event_field
     *
     * @return string
     */
    public function getEventField()
    {
        return $this->container['event_field'];
    }

    /**
     * Sets event_field
     *
     * @param string $event_field event_field
     *
     * @return self
     */
    public function setEventField($event_field)
    {

        if ((mb_strlen($event_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $event_field when calling GetDocumentAuditResponseActivityField., must be bigger than or equal to 1.');
        }

        $this->container['event_field'] = $event_field;

        return $this;
    }

    /**
     * Gets event_status_field
     *
     * @return string
     */
    public function getEventStatusField()
    {
        return $this->container['event_status_field'];
    }

    /**
     * Sets event_status_field
     *
     * @param string $event_status_field event_status_field
     *
     * @return self
     */
    public function setEventStatusField($event_status_field)
    {

        if ((mb_strlen($event_status_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $event_status_field when calling GetDocumentAuditResponseActivityField., must be bigger than or equal to 1.');
        }

        $this->container['event_status_field'] = $event_status_field;

        return $this;
    }

    /**
     * Gets location_field
     *
     * @return string
     */
    public function getLocationField()
    {
        return $this->container['location_field'];
    }

    /**
     * Sets location_field
     *
     * @param string $location_field location_field
     *
     * @return self
     */
    public function setLocationField($location_field)
    {

        if ((mb_strlen($location_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $location_field when calling GetDocumentAuditResponseActivityField., must be bigger than or equal to 1.');
        }

        $this->container['location_field'] = $location_field;

        return $this;
    }

    /**
     * Gets order_date_field
     *
     * @return string
     */
    public function getOrderDateField()
    {
        return $this->container['order_date_field'];
    }

    /**
     * Sets order_date_field
     *
     * @param string $order_date_field order_date_field
     *
     * @return self
     */
    public function setOrderDateField($order_date_field)
    {

        if ((mb_strlen($order_date_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $order_date_field when calling GetDocumentAuditResponseActivityField., must be bigger than or equal to 1.');
        }

        $this->container['order_date_field'] = $order_date_field;

        return $this;
    }

    /**
     * Gets page_field
     *
     * @return string
     */
    public function getPageField()
    {
        return $this->container['page_field'];
    }

    /**
     * Sets page_field
     *
     * @param string $page_field page_field
     *
     * @return self
     */
    public function setPageField($page_field)
    {

        if ((mb_strlen($page_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $page_field when calling GetDocumentAuditResponseActivityField., must be bigger than or equal to 1.');
        }

        $this->container['page_field'] = $page_field;

        return $this;
    }

    /**
     * Gets user_full_name_field
     *
     * @return string
     */
    public function getUserFullNameField()
    {
        return $this->container['user_full_name_field'];
    }

    /**
     * Sets user_full_name_field
     *
     * @param string $user_full_name_field User's full name.
     *
     * @return self
     */
    public function setUserFullNameField($user_full_name_field)
    {

        if ((mb_strlen($user_full_name_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $user_full_name_field when calling GetDocumentAuditResponseActivityField., must be bigger than or equal to 1.');
        }

        $this->container['user_full_name_field'] = $user_full_name_field;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


