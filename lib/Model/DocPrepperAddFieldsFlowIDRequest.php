<?php
/**
 * DocPrepperAddFieldsFlowIDRequest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  SigniFlowConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SigniFlow OpenAPI Spec v1
 *
 * ## SigniFlow API used to automate esignature workflow creation and management.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SigniFlowConnect\Model;

use \ArrayAccess;
use \SigniFlowConnect\ObjectSerializer;

/**
 * DocPrepperAddFieldsFlowIDRequest Class Doc Comment
 *
 * @category Class
 * @description #### The request sent when fields are added to a document using a FlowID.
 * @package  SigniFlowConnect
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DocPrepperAddFieldsFlowIDRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DocPrepperAddFieldsFlowIDRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'doc_field_type_field' => '\SigniFlowConnect\Model\FieldType',
        'doc_id_field' => 'float',
        'flow_id_field' => 'float',
        'height_field' => 'string',
        'width_field' => 'string',
        'is_invisible_field' => 'bool',
        'link_to_field' => 'string',
        'page_number_field' => 'float',
        'name_field' => 'string',
        'user_email_field' => 'string',
        'x_coordinate_field' => 'string',
        'y_coordinate_field' => 'string',
        'token_field' => '\SigniFlowConnect\Model\TokenField'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'doc_field_type_field' => null,
        'doc_id_field' => null,
        'flow_id_field' => null,
        'height_field' => null,
        'width_field' => null,
        'is_invisible_field' => null,
        'link_to_field' => null,
        'page_number_field' => null,
        'name_field' => null,
        'user_email_field' => 'email',
        'x_coordinate_field' => null,
        'y_coordinate_field' => null,
        'token_field' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'doc_field_type_field' => 'DocFieldTypeField',
        'doc_id_field' => 'DocIDField',
        'flow_id_field' => 'FlowIDField',
        'height_field' => 'HeightField',
        'width_field' => 'WidthField',
        'is_invisible_field' => 'IsInvisibleField',
        'link_to_field' => 'LinkToField',
        'page_number_field' => 'PageNumberField',
        'name_field' => 'NameField',
        'user_email_field' => 'UserEmailField',
        'x_coordinate_field' => 'XCoordinateField',
        'y_coordinate_field' => 'YCoordinateField',
        'token_field' => 'TokenField'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'doc_field_type_field' => 'setDocFieldTypeField',
        'doc_id_field' => 'setDocIdField',
        'flow_id_field' => 'setFlowIdField',
        'height_field' => 'setHeightField',
        'width_field' => 'setWidthField',
        'is_invisible_field' => 'setIsInvisibleField',
        'link_to_field' => 'setLinkToField',
        'page_number_field' => 'setPageNumberField',
        'name_field' => 'setNameField',
        'user_email_field' => 'setUserEmailField',
        'x_coordinate_field' => 'setXCoordinateField',
        'y_coordinate_field' => 'setYCoordinateField',
        'token_field' => 'setTokenField'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'doc_field_type_field' => 'getDocFieldTypeField',
        'doc_id_field' => 'getDocIdField',
        'flow_id_field' => 'getFlowIdField',
        'height_field' => 'getHeightField',
        'width_field' => 'getWidthField',
        'is_invisible_field' => 'getIsInvisibleField',
        'link_to_field' => 'getLinkToField',
        'page_number_field' => 'getPageNumberField',
        'name_field' => 'getNameField',
        'user_email_field' => 'getUserEmailField',
        'x_coordinate_field' => 'getXCoordinateField',
        'y_coordinate_field' => 'getYCoordinateField',
        'token_field' => 'getTokenField'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['doc_field_type_field'] = $data['doc_field_type_field'] ?? null;
        $this->container['doc_id_field'] = $data['doc_id_field'] ?? null;
        $this->container['flow_id_field'] = $data['flow_id_field'] ?? null;
        $this->container['height_field'] = $data['height_field'] ?? null;
        $this->container['width_field'] = $data['width_field'] ?? null;
        $this->container['is_invisible_field'] = $data['is_invisible_field'] ?? null;
        $this->container['link_to_field'] = $data['link_to_field'] ?? null;
        $this->container['page_number_field'] = $data['page_number_field'] ?? null;
        $this->container['name_field'] = $data['name_field'] ?? null;
        $this->container['user_email_field'] = $data['user_email_field'] ?? null;
        $this->container['x_coordinate_field'] = $data['x_coordinate_field'] ?? null;
        $this->container['y_coordinate_field'] = $data['y_coordinate_field'] ?? null;
        $this->container['token_field'] = $data['token_field'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['doc_field_type_field'] === null) {
            $invalidProperties[] = "'doc_field_type_field' can't be null";
        }
        if ($this->container['doc_id_field'] === null) {
            $invalidProperties[] = "'doc_id_field' can't be null";
        }
        if ($this->container['flow_id_field'] === null) {
            $invalidProperties[] = "'flow_id_field' can't be null";
        }
        if ($this->container['height_field'] === null) {
            $invalidProperties[] = "'height_field' can't be null";
        }
        if ((mb_strlen($this->container['height_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'height_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['width_field'] === null) {
            $invalidProperties[] = "'width_field' can't be null";
        }
        if ((mb_strlen($this->container['width_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'width_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['is_invisible_field'] === null) {
            $invalidProperties[] = "'is_invisible_field' can't be null";
        }
        if ($this->container['link_to_field'] === null) {
            $invalidProperties[] = "'link_to_field' can't be null";
        }
        if ((mb_strlen($this->container['link_to_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'link_to_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['page_number_field'] === null) {
            $invalidProperties[] = "'page_number_field' can't be null";
        }
        if ($this->container['name_field'] === null) {
            $invalidProperties[] = "'name_field' can't be null";
        }
        if ((mb_strlen($this->container['name_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'name_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['user_email_field'] === null) {
            $invalidProperties[] = "'user_email_field' can't be null";
        }
        if ((mb_strlen($this->container['user_email_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'user_email_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['x_coordinate_field'] === null) {
            $invalidProperties[] = "'x_coordinate_field' can't be null";
        }
        if ((mb_strlen($this->container['x_coordinate_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'x_coordinate_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['y_coordinate_field'] === null) {
            $invalidProperties[] = "'y_coordinate_field' can't be null";
        }
        if ((mb_strlen($this->container['y_coordinate_field']) < 1)) {
            $invalidProperties[] = "invalid value for 'y_coordinate_field', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['token_field'] === null) {
            $invalidProperties[] = "'token_field' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets doc_field_type_field
     *
     * @return \SigniFlowConnect\Model\FieldType
     */
    public function getDocFieldTypeField()
    {
        return $this->container['doc_field_type_field'];
    }

    /**
     * Sets doc_field_type_field
     *
     * @param \SigniFlowConnect\Model\FieldType $doc_field_type_field doc_field_type_field
     *
     * @return self
     */
    public function setDocFieldTypeField($doc_field_type_field)
    {
        $this->container['doc_field_type_field'] = $doc_field_type_field;

        return $this;
    }

    /**
     * Gets doc_id_field
     *
     * @return float
     */
    public function getDocIdField()
    {
        return $this->container['doc_id_field'];
    }

    /**
     * Sets doc_id_field
     *
     * @param float $doc_id_field Document ID.
     *
     * @return self
     */
    public function setDocIdField($doc_id_field)
    {
        $this->container['doc_id_field'] = $doc_id_field;

        return $this;
    }

    /**
     * Gets flow_id_field
     *
     * @return float
     */
    public function getFlowIdField()
    {
        return $this->container['flow_id_field'];
    }

    /**
     * Sets flow_id_field
     *
     * @param float $flow_id_field Document Flow ID.
     *
     * @return self
     */
    public function setFlowIdField($flow_id_field)
    {
        $this->container['flow_id_field'] = $flow_id_field;

        return $this;
    }

    /**
     * Gets height_field
     *
     * @return string
     */
    public function getHeightField()
    {
        return $this->container['height_field'];
    }

    /**
     * Sets height_field
     *
     * @param string $height_field Field height.
     *
     * @return self
     */
    public function setHeightField($height_field)
    {

        if ((mb_strlen($height_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $height_field when calling DocPrepperAddFieldsFlowIDRequest., must be bigger than or equal to 1.');
        }

        $this->container['height_field'] = $height_field;

        return $this;
    }

    /**
     * Gets width_field
     *
     * @return string
     */
    public function getWidthField()
    {
        return $this->container['width_field'];
    }

    /**
     * Sets width_field
     *
     * @param string $width_field Field width.
     *
     * @return self
     */
    public function setWidthField($width_field)
    {

        if ((mb_strlen($width_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $width_field when calling DocPrepperAddFieldsFlowIDRequest., must be bigger than or equal to 1.');
        }

        $this->container['width_field'] = $width_field;

        return $this;
    }

    /**
     * Gets is_invisible_field
     *
     * @return bool
     */
    public function getIsInvisibleField()
    {
        return $this->container['is_invisible_field'];
    }

    /**
     * Sets is_invisible_field
     *
     * @param bool $is_invisible_field Is the field invisible.
     *
     * @return self
     */
    public function setIsInvisibleField($is_invisible_field)
    {
        $this->container['is_invisible_field'] = $is_invisible_field;

        return $this;
    }

    /**
     * Gets link_to_field
     *
     * @return string
     */
    public function getLinkToField()
    {
        return $this->container['link_to_field'];
    }

    /**
     * Sets link_to_field
     *
     * @param string $link_to_field Document link.
     *
     * @return self
     */
    public function setLinkToField($link_to_field)
    {

        if ((mb_strlen($link_to_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $link_to_field when calling DocPrepperAddFieldsFlowIDRequest., must be bigger than or equal to 1.');
        }

        $this->container['link_to_field'] = $link_to_field;

        return $this;
    }

    /**
     * Gets page_number_field
     *
     * @return float
     */
    public function getPageNumberField()
    {
        return $this->container['page_number_field'];
    }

    /**
     * Sets page_number_field
     *
     * @param float $page_number_field Field page number.
     *
     * @return self
     */
    public function setPageNumberField($page_number_field)
    {
        $this->container['page_number_field'] = $page_number_field;

        return $this;
    }

    /**
     * Gets name_field
     *
     * @return string
     */
    public function getNameField()
    {
        return $this->container['name_field'];
    }

    /**
     * Sets name_field
     *
     * @param string $name_field Field name field.
     *
     * @return self
     */
    public function setNameField($name_field)
    {

        if ((mb_strlen($name_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name_field when calling DocPrepperAddFieldsFlowIDRequest., must be bigger than or equal to 1.');
        }

        $this->container['name_field'] = $name_field;

        return $this;
    }

    /**
     * Gets user_email_field
     *
     * @return string
     */
    public function getUserEmailField()
    {
        return $this->container['user_email_field'];
    }

    /**
     * Sets user_email_field
     *
     * @param string $user_email_field User email address field.
     *
     * @return self
     */
    public function setUserEmailField($user_email_field)
    {

        if ((mb_strlen($user_email_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $user_email_field when calling DocPrepperAddFieldsFlowIDRequest., must be bigger than or equal to 1.');
        }

        $this->container['user_email_field'] = $user_email_field;

        return $this;
    }

    /**
     * Gets x_coordinate_field
     *
     * @return string
     */
    public function getXCoordinateField()
    {
        return $this->container['x_coordinate_field'];
    }

    /**
     * Sets x_coordinate_field
     *
     * @param string $x_coordinate_field Document field x-coordinates.
     *
     * @return self
     */
    public function setXCoordinateField($x_coordinate_field)
    {

        if ((mb_strlen($x_coordinate_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $x_coordinate_field when calling DocPrepperAddFieldsFlowIDRequest., must be bigger than or equal to 1.');
        }

        $this->container['x_coordinate_field'] = $x_coordinate_field;

        return $this;
    }

    /**
     * Gets y_coordinate_field
     *
     * @return string
     */
    public function getYCoordinateField()
    {
        return $this->container['y_coordinate_field'];
    }

    /**
     * Sets y_coordinate_field
     *
     * @param string $y_coordinate_field Document field y-coordinates.
     *
     * @return self
     */
    public function setYCoordinateField($y_coordinate_field)
    {

        if ((mb_strlen($y_coordinate_field) < 1)) {
            throw new \InvalidArgumentException('invalid length for $y_coordinate_field when calling DocPrepperAddFieldsFlowIDRequest., must be bigger than or equal to 1.');
        }

        $this->container['y_coordinate_field'] = $y_coordinate_field;

        return $this;
    }

    /**
     * Gets token_field
     *
     * @return \SigniFlowConnect\Model\TokenField
     */
    public function getTokenField()
    {
        return $this->container['token_field'];
    }

    /**
     * Sets token_field
     *
     * @param \SigniFlowConnect\Model\TokenField $token_field token_field
     *
     * @return self
     */
    public function setTokenField($token_field)
    {
        $this->container['token_field'] = $token_field;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


